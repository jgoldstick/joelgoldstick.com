PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "blog_app_category" (
    "id" integer NOT NULL PRIMARY KEY,
    "title" varchar(250) NOT NULL,
    "slug" varchar(50) NOT NULL UNIQUE,
    "description" text NOT NULL
);
INSERT INTO blog_app_category VALUES(1,'Programming for fun','programming-fun','just a sample category.');
INSERT INTO blog_app_category VALUES(2,'Django','django','Anything related to django');
INSERT INTO blog_app_category VALUES(3,'python','python','general python articles');
INSERT INTO blog_app_category VALUES(4,'tools','tools','various tools');
INSERT INTO blog_app_category VALUES(5,'Patty','patty','This is patty''s stuff');
INSERT INTO blog_app_category VALUES(6,'Misc','misc','Things that don''t fit in other categories');
INSERT INTO blog_app_category VALUES(7,'Vim','vim','About the Vim Editor');
INSERT INTO blog_app_category VALUES(8,'random','random','random category for testing');
INSERT INTO blog_app_category VALUES(9,'Deployment','deployment','deployment articles');
INSERT INTO blog_app_category VALUES(10,'git','git','git tips');
CREATE TABLE IF NOT EXISTS "blog_app_entry_categories" (
    "id" integer NOT NULL PRIMARY KEY,
    "entry_id" integer NOT NULL,
    "category_id" integer NOT NULL REFERENCES "blog_category" ("id"),
    UNIQUE ("entry_id", "category_id")
);
INSERT INTO blog_app_entry_categories VALUES(8,4,3);
INSERT INTO blog_app_entry_categories VALUES(22,3,2);
INSERT INTO blog_app_entry_categories VALUES(23,3,3);
INSERT INTO blog_app_entry_categories VALUES(25,6,2);
INSERT INTO blog_app_entry_categories VALUES(26,6,4);
INSERT INTO blog_app_entry_categories VALUES(30,11,2);
INSERT INTO blog_app_entry_categories VALUES(31,11,3);
INSERT INTO blog_app_entry_categories VALUES(33,7,4);
INSERT INTO blog_app_entry_categories VALUES(35,8,2);
INSERT INTO blog_app_entry_categories VALUES(36,8,4);
INSERT INTO blog_app_entry_categories VALUES(38,9,1);
INSERT INTO blog_app_entry_categories VALUES(39,9,3);
INSERT INTO blog_app_entry_categories VALUES(41,14,2);
INSERT INTO blog_app_entry_categories VALUES(42,15,2);
INSERT INTO blog_app_entry_categories VALUES(45,5,4);
INSERT INTO blog_app_entry_categories VALUES(47,2,2);
INSERT INTO blog_app_entry_categories VALUES(48,12,6);
INSERT INTO blog_app_entry_categories VALUES(49,16,6);
CREATE TABLE IF NOT EXISTS "blog_app_entry" (
    "id" integer NOT NULL PRIMARY KEY,
    "title" varchar(250) NOT NULL,
    "slug" varchar(50) NOT NULL,
    "excerpt" text NOT NULL,
    "excerpt_html" text NOT NULL,
    "body" text NOT NULL,
    "body_html" text NOT NULL,
    "pub_date" datetime NOT NULL,
    "author_id" integer NOT NULL REFERENCES "auth_user" ("id"),
    "featured" bool NOT NULL,
    "status" integer NOT NULL,
, modified_date "pub_date" datetime);
INSERT INTO blog_app_entry VALUES(2,'Making a weblog','making-weblog',replace(replace('I am making a weblog using the code in Practical Django Projects as a guide.\r\n\r\nAdditional text to see if update works','\r',char(13)),'\n',char(10)),replace('<p>I am making a weblog using the code in Practical Django Projects as a guide.</p>\n<p>Additional text to see if update works</p>','\n',char(10)),replace(replace('How to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. \r\n\r\n So, in my home ''workshop'' I''m using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. \r\n\r\n I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.\r\nHow to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. \r\n\r\n So, in my home ''workshop'' I''m using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. \r\n\r\n I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.','\r',char(13)),'\n',char(10)),replace('<p>How to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. </p>\n<p>So, in my home ''workshop'' I''m using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. </p>\n<p>I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.\nHow to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. </p>\n<p>So, in my home ''workshop'' I''m using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. </p>\n<p>I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.</p>','\n',char(10)),'2012-09-20 16:57:16',1,0,'Django','2020-10-19 16:36:07.255555');
INSERT INTO blog_app_entry VALUES(3,'my apache2.conf file','my-apache2conf-file','This is to get mod_wsgi to run','<p>This is to get mod_wsgi to run</p>',replace(replace('<p>Here is my wsgi.py file.  It lives in <code>/home/jcg/code/learning/myapp/myapp/wsgi.py</code></p>\r\n    :::python\r\n    import os, sys\r\n\r\n    sys.path.append(''/home/jcg/code/learn'')\r\n    sys.path.append(''/home/jcg/code/learn/myapp'')\r\n\r\n\r\n    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myapp.settings")\r\n\r\n    # This application object is used by any WSGI server configured to use this\r\n    # file. This includes Django''s development server, if the WSGI_APPLICATION\r\n    # setting points here.\r\n    from django.core.wsgi import get_wsgi_application\r\n    application = get_wsgi_application()\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nHere is the code in <code>/etc/apache2/apache2.conf</code>\r\n</p>\r\n\r\n    :::apache\r\n    # https://docs.djangoproject.com/en/1.4/howto/deployment/wsgi/modwsgi/\r\n    # jcg 9/18/2012\r\n    Alias /media/ /home/jcg/code/learn/media/\r\n\r\n    <Directory /home/jcg/code/learn/media>\r\n    Order deny,allow\r\n    Allow from all\r\n    </Directory>\r\n\r\n    WSGIScriptAlias / /home/jcg/code/learn//myapp/myapp/wsgi.py\r\n    WSGIPythonPath /home/jcg/code/learn/lib/python2.7/site-packages\r\n\r\n    <Directory /home/jcg/code/learn/myapp>\r\n    Order deny,allow\r\n    Allow from all\r\n    </Directory>','\r',char(13)),'\n',char(10)),replace('<p>Here is my wsgi.py file.  It lives in <code>/home/jcg/code/learning/myapp/myapp/wsgi.py</code></p>\n<pre class="codehilite"><code class="language-python">import os, sys\n\nsys.path.append(''/home/jcg/code/learn'')\nsys.path.append(''/home/jcg/code/learn/myapp'')\n\n\nos.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;myapp.settings&quot;)\n\n# This application object is used by any WSGI server configured to use this\n# file. This includes Django''s development server, if the WSGI_APPLICATION\n# setting points here.\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()\n</code></pre>\n\n<p></code>\n</pre></p>\n<p>\nHere is the code in <code>/etc/apache2/apache2.conf</code>\n</p>\n\n<pre class="codehilite"><code class="language-apache"># https://docs.djangoproject.com/en/1.4/howto/deployment/wsgi/modwsgi/\n# jcg 9/18/2012\nAlias /media/ /home/jcg/code/learn/media/\n\n&lt;Directory /home/jcg/code/learn/media&gt;\nOrder deny,allow\nAllow from all\n&lt;/Directory&gt;\n\nWSGIScriptAlias / /home/jcg/code/learn//myapp/myapp/wsgi.py\nWSGIPythonPath /home/jcg/code/learn/lib/python2.7/site-packages\n\n&lt;Directory /home/jcg/code/learn/myapp&gt;\nOrder deny,allow\nAllow from all\n&lt;/Directory&gt;\n</code></pre>','\n',char(10)),'2012-09-20 17:07:03',1,0,'','2020-10-19 16:36:00.105296');
INSERT INTO blog_app_entry VALUES(4,'Models for this blog','models-blog','','',replace(replace('Here is the code in models.py for the blog application\r\n\r\n    :::python\r\n    from django.db import models\r\n    from django.contrib import admin\r\n    from markdown import markdown\r\n    import datetime\r\n    from django.contrib.auth.models import User\r\n    from tagging.fields import TagField\r\n\r\n    # Create your models here.\r\n    class BlogPost(models.Model):\r\n        title = models.CharField(max_length=150)\r\n        body = models.TextField()\r\n        timestamp = models.DateTimeField(auto_now_add=True, blank=True)\r\n        \r\n        def __unicode__(self):\r\n            return self.title\r\n        \r\n    class BlogPostAdmin(admin.ModelAdmin):\r\n        list_display = [''title'', ''timestamp'', ''pk'']\r\n    admin.site.register(BlogPost, BlogPostAdmin)\r\n\r\n    class Category(models.Model):\r\n        title = models.CharField(max_length=250, help_text="250 Characters Max")\r\n        slug = models.SlugField(unique=True, help_text="Suggested value generated from title. Must be unique.")\r\n        description = models.TextField()\r\n        \r\n        def __unicode__(self):\r\n            return self.title\r\n            \r\n        class Meta:\r\n            verbose_name_plural = "Categories"\r\n            \r\n    class CategoryAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {''slug'': [''title'']}\r\n        \r\n    admin.site.register(Category, CategoryAdmin)\r\n       \r\n\r\n    class Entry(models.Model):\r\n        LIVE_STATUS = 1\r\n        DRAFT_STATUS = 2\r\n        HIDDEN_STATUS = 3\r\n        STATUS_CHOICES = (\r\n            (LIVE_STATUS, ''Live''),\r\n            (DRAFT_STATUS,''Draft''),\r\n            (HIDDEN_STATUS, ''Hidden''),\r\n        )\r\n        title = models.CharField(max_length=250)\r\n        slug = models.SlugField(unique_for_date=''pub_date'', help_text="Suggested value generated from title. Must be unique.")\r\n        excerpt = models.TextField(blank=True)\r\n        excerpt_html = models.TextField(editable=False, blank=True)    \r\n        body = models.TextField()\r\n        body_html = models.TextField(editable=False, blank=True)    \r\n        pub_date = models.DateTimeField(default=datetime.datetime.now)\r\n        author = models.ForeignKey(User)\r\n        enable_comments = models.BooleanField(default=True)\r\n        featured = models.BooleanField(default=False)\r\n        status = models.IntegerField(choices=STATUS_CHOICES, default=LIVE_STATUS)\r\n        categories = models.ManyToManyField(Category)\r\n        tags = TagField()\r\n        \r\n        def save(self, force_insert=False, force_update=False):\r\n            self.body_html = markdown(self.body, [''codehilite''])\r\n            if self.excerpt:\r\n                self.excerpt_html = markdown(self.excerpt_html, [''codehilite''])\r\n            super(Entry, self).save(force_insert, force_update)\r\n            \r\n        class Meta:\r\n            verbose_name_plural = "Entries"\r\n            ordering = [''-pub_date'']\r\n\r\n        def __unicode__(self):\r\n            return self.title\r\n            \r\n        def get_absolute_url(self):\r\n            return "/blog/%s/%s/" % (self.pub_date.strftime("%Y/%b/%d").lower(), self.slug)\r\n        \r\n    class EntryAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {''slug'': [''title'']}\r\n        \r\n    admin.site.register(Entry, EntryAdmin)','\r',char(13)),'\n',char(10)),replace('<p>Here is the code in models.py for the blog application</p>\n<pre class="codehilite"><code class="language-python">from django.db import models\nfrom django.contrib import admin\nfrom markdown import markdown\nimport datetime\nfrom django.contrib.auth.models import User\nfrom tagging.fields import TagField\n\n# Create your models here.\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True, blank=True)\n\n    def __unicode__(self):\n        return self.title\n\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = [''title'', ''timestamp'', ''pk'']\nadmin.site.register(BlogPost, BlogPostAdmin)\n\nclass Category(models.Model):\n    title = models.CharField(max_length=250, help_text=&quot;250 Characters Max&quot;)\n    slug = models.SlugField(unique=True, help_text=&quot;Suggested value generated from title. Must be unique.&quot;)\n    description = models.TextField()\n\n    def __unicode__(self):\n        return self.title\n\n    class Meta:\n        verbose_name_plural = &quot;Categories&quot;\n\nclass CategoryAdmin(admin.ModelAdmin):\n    prepopulated_fields = {''slug'': [''title'']}\n\nadmin.site.register(Category, CategoryAdmin)\n\n\nclass Entry(models.Model):\n    LIVE_STATUS = 1\n    DRAFT_STATUS = 2\n    HIDDEN_STATUS = 3\n    STATUS_CHOICES = (\n        (LIVE_STATUS, ''Live''),\n        (DRAFT_STATUS,''Draft''),\n        (HIDDEN_STATUS, ''Hidden''),\n    )\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(unique_for_date=''pub_date'', help_text=&quot;Suggested value generated from title. Must be unique.&quot;)\n    excerpt = models.TextField(blank=True)\n    excerpt_html = models.TextField(editable=False, blank=True)    \n    body = models.TextField()\n    body_html = models.TextField(editable=False, blank=True)    \n    pub_date = models.DateTimeField(default=datetime.datetime.now)\n    author = models.ForeignKey(User)\n    enable_comments = models.BooleanField(default=True)\n    featured = models.BooleanField(default=False)\n    status = models.IntegerField(choices=STATUS_CHOICES, default=LIVE_STATUS)\n    categories = models.ManyToManyField(Category)\n    tags = TagField()\n\n    def save(self, force_insert=False, force_update=False):\n        self.body_html = markdown(self.body, [''codehilite''])\n        if self.excerpt:\n            self.excerpt_html = markdown(self.excerpt_html, [''codehilite''])\n        super(Entry, self).save(force_insert, force_update)\n\n    class Meta:\n        verbose_name_plural = &quot;Entries&quot;\n        ordering = [''-pub_date'']\n\n    def __unicode__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return &quot;/blog/%s/%s/&quot; % (self.pub_date.strftime(&quot;%Y/%b/%d&quot;).lower(), self.slug)\n\nclass EntryAdmin(admin.ModelAdmin):\n    prepopulated_fields = {''slug'': [''title'']}\n\nadmin.site.register(Entry, EntryAdmin)\n</code></pre>','\n',char(10)),'2012-09-20 19:43:40',1,0,'','2020-10-19 16:35:54.937542');
INSERT INTO blog_app_entry VALUES(5,'Creating obfuscated unicode from plaintext','creating-obfuscated-unicode-plaintext','There is a site [here](http://graphics.glig.com/generators/unicode_text) that lets you type in text to produce unicode text using substitute characters that look similar enough to ascii to be read.','<p>There is a site <a href="http://graphics.glig.com/generators/unicode_text">here</a> that lets you type in text to produce unicode text using substitute characters that look similar enough to ascii to be read.</p>',replace(replace('There is a site [here](http://graphics.glig.com/generators/unicode_text){: target="_blank"}\r\n\r\nHere is my email address: ʝσɛℓ.ɢσℓ∂ƨтιcκ@ɢмαιℓ.cσм\r\n\r\nThere are two reasons i know of to use this service.  \r\n\r\n* First, using an obfuscated email address on the page lets people know your email address, but presumably makes it harder for bots to harvest it.\r\n* Second, its an easy way to check if your system handles unicode corectly','\r',char(13)),'\n',char(10)),replace('<p>There is a site <a href="http://graphics.glig.com/generators/unicode_text">here</a>{: target="_blank"}</p>\n<p>Here is my email address: ʝσɛℓ.ɢσℓ∂ƨтιcκ@ɢмαιℓ.cσм</p>\n<p>There are two reasons i know of to use this service.  </p>\n<ul>\n<li>First, using an obfuscated email address on the page lets people know your email address, but presumably makes it harder for bots to harvest it.</li>\n<li>Second, its an easy way to check if your system handles unicode corectly</li>\n</ul>','\n',char(10)),'2012-09-21 14:00:47',1,0,'tools','2020-10-19 16:35:49.072866');
INSERT INTO blog_app_entry VALUES(6,'Markdown','markdown','This is the [original documentation](http://daringfireball.net/projects/markdown/syntax)','<p>This is the <a href="http://daringfireball.net/projects/markdown/syntax">original documentation</a></p>',replace(replace('here is the [original documentation](http://daringfireball.net/projects/markdown/syntax#header)\r\n\r\n------------------------------------\r\n\r\n# Header 1 #\r\n## Header 2 ##\r\n### Header 3 ###\r\n#### Header 4 ####\r\n##### Header 5 #####\r\n\r\nThis is a paragraph, which is text surrounded by whitespace. Paragraphs can be on one \r\nline (or many), and can drone on for hours.  \r\n\r\nHere is a Markdown link to [Warped](http://warpedvisions.org), and a literal . \r\nNow some SimpleLinks, like one to [google] (automagically links to are-you-\r\nfeeling-lucky), a [wiki: test] link to a Wikipedia page, and a link to \r\n[foldoc: CPU]s at foldoc.  \r\n\r\nNow some inline markup like _italics_,  **bold**, and `code()`. Note that underscores in \r\nwords are ignored in Markdown Extra.\r\n\r\n![picture alt](/static/favicon.ico "my favicon")     \r\n\r\n> Blockquotes are like quoted text in email replies\r\n>> And, they can be nested\r\n\r\n## Lists\r\n\r\n* Bullet lists are easy too\r\n- Another one\r\n+ Another one\r\n\r\nThis is a numbered list.  \r\n\r\n1. A numbered list\r\n2. Which is numbered\r\n3.    With periods and a space\r\n\r\n\r\nAnd now some code:\r\n\r\n    // Code is just text indented a bit (4 spaces)\r\n    which(is_easy) to_remember();\r\n\r\n[link to lists above if headerid is in options list](#lists)\r\n\r\n[link to Header 1 above if headerid is in options list](#header-1)\r\n\r\n\r\n-----------------------------\r\n\r\nis there an hr above and below? There should be\r\n\r\n********','\r',char(13)),'\n',char(10)),replace('<p>here is the <a href="http://daringfireball.net/projects/markdown/syntax#header">original documentation</a></p>\n<hr>\n<h1>Header 1</h1>\n<h2>Header 2</h2>\n<h3>Header 3</h3>\n<h4>Header 4</h4>\n<h5>Header 5</h5>\n<p>This is a paragraph, which is text surrounded by whitespace. Paragraphs can be on one \nline (or many), and can drone on for hours.  </p>\n<p>Here is a Markdown link to <a href="http://warpedvisions.org">Warped</a>, and a literal . \nNow some SimpleLinks, like one to [google] (automagically links to are-you-\nfeeling-lucky), a [wiki: test] link to a Wikipedia page, and a link to \n[foldoc: CPU]s at foldoc.  </p>\n<p>Now some inline markup like <em>italics</em>,  <strong>bold</strong>, and <code>code()</code>. Note that underscores in \nwords are ignored in Markdown Extra.</p>\n<p><img alt="picture alt" src="/static/favicon.ico" title="my favicon">     </p>\n<blockquote>\n<p>Blockquotes are like quoted text in email replies</p>\n<blockquote>\n<p>And, they can be nested</p>\n</blockquote>\n</blockquote>\n<h2>Lists</h2>\n<ul>\n<li>Bullet lists are easy too</li>\n<li>Another one</li>\n<li>Another one</li>\n</ul>\n<p>This is a numbered list.  </p>\n<ol>\n<li>A numbered list</li>\n<li>Which is numbered</li>\n<li>With periods and a space</li>\n</ol>\n<p>And now some code:</p>\n<pre class="codehilite"><code>// Code is just text indented a bit (4 spaces)\nwhich(is_easy) to_remember();\n</code></pre>\n\n<p><a href="#lists">link to lists above if headerid is in options list</a></p>\n<p><a href="#header-1">link to Header 1 above if headerid is in options list</a></p>\n<hr>\n<p>is there an hr above and below? There should be</p>\n<hr>','\n',char(10)),'2012-09-21 17:27:35',1,1,0,1,'','2020-10-19 16:34:56.440491');
INSERT INTO blog_app_entry VALUES(7,'Restart Apache, view logs','restart-apache',replace(replace('sudo /etc/init.d/apache2 restart\r\n\r\ntail /var/apache2/log/access.log','\r',char(13)),'\n',char(10)),replace('<p>sudo /etc/init.d/apache2 restart</p>\n<p>tail /var/apache2/log/access.log</p>','\n',char(10)),replace(replace('## Ubuntu\r\n\r\nsudo /etc/init.d/apache2 restart\r\n\r\ntail /var/apache2/log/access.log\r\n\r\n## Red Hat\r\nTo run Apache type the following at the command prompt:\r\n/etc/init.d/httpd start\r\n\r\nTo test it type:\r\n/etc/init.d/httpd status\r\n\r\nIf apache is running you should see something like the following:\r\nhttpd (pid 1844 1843 1842 1841 1840 1839 1838 1837 1828) is running...\r\n\r\nThere are several ways to run Apache at bootup, and here is one of the simple ones.\r\nTo run Apache at bootup type:\r\nvi /etc/rc.local\r\n\r\nThis will open rc.local in the text editor "vi". Arrow down to the bottom of the text (there may not be any yet, in which case it will be the first line) and add:\r\n/etc/init.d/httpd start','\r',char(13)),'\n',char(10)),replace('<h2>Ubuntu</h2>\n<p>sudo /etc/init.d/apache2 restart</p>\n<p>tail /var/apache2/log/access.log</p>\n<h2>Red Hat</h2>\n<p>To run Apache type the following at the command prompt:\n/etc/init.d/httpd start</p>\n<p>To test it type:\n/etc/init.d/httpd status</p>\n<p>If apache is running you should see something like the following:\nhttpd (pid 1844 1843 1842 1841 1840 1839 1838 1837 1828) is running...</p>\n<p>There are several ways to run Apache at bootup, and here is one of the simple ones.\nTo run Apache at bootup type:\nvi /etc/rc.local</p>\n<p>This will open rc.local in the text editor "vi". Arrow down to the bottom of the text (there may not be any yet, in which case it will be the first line) and add:\n/etc/init.d/httpd start</p>','\n',char(10)),'2012-09-24 12:43:20',1,1,0,1,'','2020-10-19 16:34:48.544308');
INSERT INTO blog_app_entry VALUES(8,'Moving to AWS -- EC2 and S3','moving-aws-and-ecs','I plan to deploy this site to Amazon Web Services (AWS) and serve static content with S3.  Here are my notes','<p>I plan to deploy this site to Amazon Web Services (AWS) and serve static content with S3.  Here are my notes</p>',replace(replace('The motivation behind this site is to develop a ''portfolio'' where I can write articles about topics that interest me, and provide prospective clients or employers a living example of the results of the skills I possess, or are in the process of learning.\r\n\r\nI have some sites hosted on dreamhost, which is a low cost, reliable shared hosting company.  They provide a method for django site deployment.  For this project I am looking to get closer to the metal, and so I have decided to use Amazon services.\r\n\r\nAmazon Web Services (AWS) provides what I hope will be a low cost virtual machine with ssh access.  In the past I have worked with a system administrator to deploy django at work, but I wasn''t directly involved in running the services, or in the deployment.  So here I go.\r\n\r\nAlthough I expect light traffic on the site, all advice points to using a separate server for static content.  That will be housed in an S3 bucket\r\n\r\nSetting up the static storage on S3 proved to be easy.  I have very few static files, so I copied them to S3 using the built in file copy facility at Amazon.  Buckets can''t be accessed with ssh command line or something like Filezilla.  There is an application for django that will allow files to be copied from the manage.py interface.  I''ll explore that later.\r\n\r\nThe AMI image I chose was and Ubuntu system, because I am familiar with Ubuntu on the desktop.  This didn''t work out well because I couldn''t get ssh access.  Ubuntu images use username ubuntu apparently.  Other images use ec2-user or root.  Failing to get Ubuntu running, I switched to the first Amazon image.  It turns out to be a Red Hat Server.  This works fine with ec2-user.','\r',char(13)),'\n',char(10)),replace('<p>The motivation behind this site is to develop a ''portfolio'' where I can write articles about topics that interest me, and provide prospective clients or employers a living example of the results of the skills I possess, or are in the process of learning.</p>\n<p>I have some sites hosted on dreamhost, which is a low cost, reliable shared hosting company.  They provide a method for django site deployment.  For this project I am looking to get closer to the metal, and so I have decided to use Amazon services.</p>\n<p>Amazon Web Services (AWS) provides what I hope will be a low cost virtual machine with ssh access.  In the past I have worked with a system administrator to deploy django at work, but I wasn''t directly involved in running the services, or in the deployment.  So here I go.</p>\n<p>Although I expect light traffic on the site, all advice points to using a separate server for static content.  That will be housed in an S3 bucket</p>\n<p>Setting up the static storage on S3 proved to be easy.  I have very few static files, so I copied them to S3 using the built in file copy facility at Amazon.  Buckets can''t be accessed with ssh command line or something like Filezilla.  There is an application for django that will allow files to be copied from the manage.py interface.  I''ll explore that later.</p>\n<p>The AMI image I chose was and Ubuntu system, because I am familiar with Ubuntu on the desktop.  This didn''t work out well because I couldn''t get ssh access.  Ubuntu images use username ubuntu apparently.  Other images use ec2-user or root.  Failing to get Ubuntu running, I switched to the first Amazon image.  It turns out to be a Red Hat Server.  This works fine with ec2-user.</p>','\n',char(10)),'2012-09-25 12:50:55',1,1,0,1,'','2020-10-19 16:34:42.943048');
INSERT INTO blog_app_entry VALUES(9,'My ESPN Developer Account into','my-espn-developer-account','2C:41:38:8F:DC:27','<p>2C:41:38:8F:DC:27</p>',replace(replace('Key: h9ckawgep8u88rxxpjpjnvpz\r\n\r\nApplication:\r\n    jcg espn api fun\r\n \r\nKey:\r\n    h9ckawgep8u88rxxpjpjnvpz','\r',char(13)),'\n',char(10)),replace('<p>Key: h9ckawgep8u88rxxpjpjnvpz</p>\n<p>Application:\n    jcg espn api fun</p>\n<p>Key:\n    h9ckawgep8u88rxxpjpjnvpz</p>','\n',char(10)),'2012-09-27 12:28:41',1,1,0,1,'','2020-10-19 16:34:37.932064');
INSERT INTO blog_app_entry VALUES(11,'Django Forms','django-forms','Some notes on using Django Forms, ModelForms and BetterForms','<p>Some notes on using Django Forms, ModelForms and BetterForms</p>',replace(replace('Forms give websites the ability for the reader to participate.  Every website I''ve ever written has used forms.  Creating a basic form in html, and writing the backend code to process the input in the most bare bones way isn''t too much work, but that''s not enough.  A form should look good, give hints to the user about how to properly fill it out, and rigorously check the data provided.  If there is a problem in the form data, the user should be gently coaxed to correct the problems.  In this regard, django Forms facility helps a lot.\r\n\r\n## Basic Form\r\n\r\nbla blah\r\n\r\n## Some Simple Validation\r\n\r\ncomes out of the box\r\n\r\n## Fields that depend on other fields\r\n\r\n## Adding Bot Deterent Capability\r\n\r\nMany sites use Captcha to deter automatic form submission by Bots.  The idea is that a human can read some poorly displayed characters correctly and repeat them back to a form in a field.  A Bot program will have a much harder time doing this, and so the Bot submissions will fail.  Like many people, I find Captcha to be annoying.  The letters are often too poorly displayed to figure out correctly.\r\n\r\nAs an alternative, I prefer the form ask the user a question that is easy for a human being to answer correctly, but not a Bot.  In this example, I am using a randomly generated arithmetic equation -- the sum of 2 or 3 randomly generated integers.  To keep it easy, I limit the integers to numbers from 1 to 20.  This is probably not a very good test, since the answer will be from 3 to 60, and I can imagine a bot could work that out by brute force.  Perhaps a better test would be to display some text and ask for the second word that starts with ''C'', or something.\r\n\r\nWhatever the test, the form can generate the question and the answer when entered.   When the form is submitted, the answer is checked.  The problem is that HTTP is stateless, and so we need a way to save the answer when it is generated, so that the submit request can use it to test it.\r\n\r\nHere is my code for the test:\r\n\r\n    :::python\r\n    import random                                \r\n    def produce_expression():\r\n        """\r\n        return a tuple: expression (str), answer (int)\r\n        """\r\n        num_terms = random.randint(2,3)\r\n        operands = []\r\n        while num_terms:\r\n            n = random.randint(1,21)\r\n            operands.append(n)\r\n            num_terms -= 1\r\n            \r\n        result = sum(operands)\r\n        string_operands = map(str, operands)\r\n        expression = " + ".join(string_operands)\r\n        return expression, result\r\n\r\nThe view.py code looks like this:\r\n\r\n    :::python\r\n    def contact(request):\r\n\r\n    test_expression, answer = produce_expression()\r\n    request.session[''last_answer''] = request.session.get(''answer'', None)\r\n    request.session[''answer''] = answer\r\n\r\n    answer = request.session[''answer'']\r\n    if request.method == ''POST'': # If the form has been submitted...\r\n        #form = ContactForm(request.POST) # A form bound to the POST data\r\n        form = ContactForm(request.POST, request=request) # A form bound to the POST data\r\n        if form.is_valid(): # All validation rules pass\r\n            # Process the data in form.cleaned_data\r\n            request.session[''answer''] = ""\r\n            return HttpResponseRedirect(''/thanks/'') # Redirect after POST\r\n    else:\r\n        form = ContactForm() # An unbound form \r\n\r\n    c = {''form'': form, ''test'': test_expression, ''answer'': answer}\r\n    c.update(csrf(request))\r\n    return render_to_response(''blog/contact_form.html'', c)\r\n   \r\nEvery time the contact page is created we get a new question and answer:\r\n\r\n    :::python\r\n    test_expression, answer = produce_expression()\r\n    request.session[''last_answer''] = request.session.get(''answer'', None)\r\n    request.session[''answer''] = answer\r\n\r\nWhen the user enters his answer in the form, the form is once again created, so we need to keep the answer that was correct when the user entered his choice.  The session object which is included in the request object will maintain state for us\r\n\r\nWhen we instantiate the form with the POST data, we also pass the request object which contains the session where we have stored the answer.  In the form itself, we use the clean method to compare results.\r\n\r\n    :::python\r\n    class ContactForm(forms.Form):\r\n        subject = forms.CharField(max_length=100, required=True)\r\n        message = forms.CharField(required=True)\r\n        sender = forms.EmailField(required=True)\r\n        test_result = forms.IntegerField(label="Test Result", required=True)\r\n        cc_myself = forms.BooleanField(required=False)\r\n\r\n        def __init__(self, *args,**kwargs):\r\n            # overide __init__ to grab the request object, and then initialize the parent class\r\n            self.request = kwargs.pop(''request'', None)\r\n            super (ContactForm,self).__init__(*args,**kwargs)\r\n\r\n        # django runs clean_<field name> for each field in your form\r\n        def clean_test_result(self):\r\n            data = self.cleaned_data[''test_result'']\r\n            if self.request.session[''last_answer''] <> data:\r\n                raise forms.ValidationError("You didn''t get the math right!")\r\n\r\nAnd here is the template:\r\n\r\n    :::html\r\n    {% extends ''base.html'' %}\r\n            {% block head %}\r\n            <title>joelgoldstick.com - Contact Us</title>\r\n            {% endblock %}\r\n            {% block content %}\r\n            <h1>Contact Us</h1>\r\n            <p>Let us know what you think!</p>\r\n            <p>To be sure you are not a bot, answer this below:</p>\r\n            <p>{{ test }} = ??</p>\r\n            <form id="contact_form" action="" method="post">{% csrf_token %}\r\n            {{ form.as_p }}\r\n            <input type="submit" value="Submit">\r\n            </form>\r\n            {% endblock %}','\r',char(13)),'\n',char(10)),replace('<p>Forms give websites the ability for the reader to participate.  Every website I''ve ever written has used forms.  Creating a basic form in html, and writing the backend code to process the input in the most bare bones way isn''t too much work, but that''s not enough.  A form should look good, give hints to the user about how to properly fill it out, and rigorously check the data provided.  If there is a problem in the form data, the user should be gently coaxed to correct the problems.  In this regard, django Forms facility helps a lot.</p>\n<h2>Basic Form</h2>\n<p>bla blah</p>\n<h2>Some Simple Validation</h2>\n<p>comes out of the box</p>\n<h2>Fields that depend on other fields</h2>\n<h2>Adding Bot Deterent Capability</h2>\n<p>Many sites use Captcha to deter automatic form submission by Bots.  The idea is that a human can read some poorly displayed characters correctly and repeat them back to a form in a field.  A Bot program will have a much harder time doing this, and so the Bot submissions will fail.  Like many people, I find Captcha to be annoying.  The letters are often too poorly displayed to figure out correctly.</p>\n<p>As an alternative, I prefer the form ask the user a question that is easy for a human being to answer correctly, but not a Bot.  In this example, I am using a randomly generated arithmetic equation -- the sum of 2 or 3 randomly generated integers.  To keep it easy, I limit the integers to numbers from 1 to 20.  This is probably not a very good test, since the answer will be from 3 to 60, and I can imagine a bot could work that out by brute force.  Perhaps a better test would be to display some text and ask for the second word that starts with ''C'', or something.</p>\n<p>Whatever the test, the form can generate the question and the answer when entered.   When the form is submitted, the answer is checked.  The problem is that HTTP is stateless, and so we need a way to save the answer when it is generated, so that the submit request can use it to test it.</p>\n<p>Here is my code for the test:</p>\n<pre class="codehilite"><code class="language-python">import random                                \ndef produce_expression():\n    &quot;&quot;&quot;\n    return a tuple: expression (str), answer (int)\n    &quot;&quot;&quot;\n    num_terms = random.randint(2,3)\n    operands = []\n    while num_terms:\n        n = random.randint(1,21)\n        operands.append(n)\n        num_terms -= 1\n\n    result = sum(operands)\n    string_operands = map(str, operands)\n    expression = &quot; + &quot;.join(string_operands)\n    return expression, result\n</code></pre>\n\n<p>The view.py code looks like this:</p>\n<pre class="codehilite"><code class="language-python">def contact(request):\n\ntest_expression, answer = produce_expression()\nrequest.session[''last_answer''] = request.session.get(''answer'', None)\nrequest.session[''answer''] = answer\n\nanswer = request.session[''answer'']\nif request.method == ''POST'': # If the form has been submitted...\n    #form = ContactForm(request.POST) # A form bound to the POST data\n    form = ContactForm(request.POST, request=request) # A form bound to the POST data\n    if form.is_valid(): # All validation rules pass\n        # Process the data in form.cleaned_data\n        request.session[''answer''] = &quot;&quot;\n        return HttpResponseRedirect(''/thanks/'') # Redirect after POST\nelse:\n    form = ContactForm() # An unbound form\n\nc = {''form'': form, ''test'': test_expression, ''answer'': answer}\nc.update(csrf(request))\nreturn render_to_response(''blog/contact_form.html'', c)\n</code></pre>\n\n<p>Every time the contact page is created we get a new question and answer:</p>\n<pre class="codehilite"><code class="language-python">test_expression, answer = produce_expression()\nrequest.session[''last_answer''] = request.session.get(''answer'', None)\nrequest.session[''answer''] = answer\n</code></pre>\n\n<p>When the user enters his answer in the form, the form is once again created, so we need to keep the answer that was correct when the user entered his choice.  The session object which is included in the request object will maintain state for us</p>\n<p>When we instantiate the form with the POST data, we also pass the request object which contains the session where we have stored the answer.  In the form itself, we use the clean method to compare results.</p>\n<pre class="codehilite"><code class="language-python">class ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100, required=True)\n    message = forms.CharField(required=True)\n    sender = forms.EmailField(required=True)\n    test_result = forms.IntegerField(label=&quot;Test Result&quot;, required=True)\n    cc_myself = forms.BooleanField(required=False)\n\n    def __init__(self, *args,**kwargs):\n        # overide __init__ to grab the request object, and then initialize the parent class\n        self.request = kwargs.pop(''request'', None)\n        super (ContactForm,self).__init__(*args,**kwargs)\n\n    # django runs clean_&lt;field name&gt; for each field in your form\n    def clean_test_result(self):\n        data = self.cleaned_data[''test_result'']\n        if self.request.session[''last_answer''] &lt;&gt; data:\n            raise forms.ValidationError(&quot;You didn''t get the math right!&quot;)\n</code></pre>\n\n<p>And here is the template:</p>\n<pre class="codehilite"><code class="language-html">{% extends ''base.html'' %}\n        {% block head %}\n        &lt;title&gt;joelgoldstick.com - Contact Us&lt;/title&gt;\n        {% endblock %}\n        {% block content %}\n        &lt;h1&gt;Contact Us&lt;/h1&gt;\n        &lt;p&gt;Let us know what you think!&lt;/p&gt;\n        &lt;p&gt;To be sure you are not a bot, answer this below:&lt;/p&gt;\n        &lt;p&gt;{{ test }} = ??&lt;/p&gt;\n        &lt;form id=&quot;contact_form&quot; action=&quot;&quot; method=&quot;post&quot;&gt;{% csrf_token %}\n        {{ form.as_p }}\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;\n        &lt;/form&gt;\n        {% endblock %}\n</code></pre>','\n',char(10)),'2012-09-30 13:05:14',1,1,0,1,'','2020-10-19 16:34:29.683357');
INSERT INTO blog_app_entry VALUES(12,'How I Got here','how-i-got-here','Notes on how I came to where I am as a software developer','<p>Notes on how I came to where I am as a software developer</p>',replace(replace('## Early Seeds\r\n\r\nSomewhere around when I was in 4th grade, my class had a field trip to the Ford River Rouge Assembly plant.  It was fascinating.  The [Rouge Plant](http://en.wikipedia.org/wiki/Rouge_plant) was a full service affair.  They made their own steel, their own glass, and ultimately assemble various Fords out of these materials.  This was a giant systems engineering project.  I got to see how it worked!\r\n\r\nI grew up in the late 60s when the NASA space program to reach the moon was a very big thing.  This got me curious about astronomy and I soon found that there was a local astronomy club ([The Detroit Astronomical Society](http://ephemeraldetroit.blogspot.com/2011/10/from-what-i-can-ascertain-detroit.html) where more experienced members would help new members built their own telescope.  I built a 6 inch Newtonian telescope, grinding the mirror to a concave spherical shape, and then polished it to a very accurate parabola.  The equatorial mounting was made with a variety of pipe fittings.  So, this was my first engineering project.\r\n\r\n## College\r\n\r\nI began college expecting to study electrical engineering, especial analog circuit design.  But those were the years of the beginnings of microprocessors.  Digital was taking off in a big way, and it was possible to build your own computer.  I did.  It was an S-100 Z80 system with a North Star floppy disk drive.  To get it to work needed code written in assembly language that interfaced to the keyboard, disk drive and video output cards.  My second engineering project!\r\n\r\nBy the time I graduated, I was hooked on software development, having learned how to write assembler code, Pascal, and a little PL/M\r\n\r\n## Professional Path\r\n\r\n[My first appearance on the internet](http://groups.google.com/group/alt.psychology.personality/tree/browse_frm/month/1995-03/7126ba5c1e1b0d8f?rnum=21&_done=%2Fgroup%2Falt.psychology.personality%2Fbrowse_frm%2Fmonth%2F1995-03%3F#doc_fb6b7e6b31190bb6) was a post to the alt.psychology.personality use-net group on March 1, 1995.  I haven''t really been interested in the enneagram in some time, but I read a lot about it in the early 90s\r\n\r\nI actually appear as a co author to a [paper describing the first project I worked on out of College](http://accelconf.web.cern.ch/AccelConf/p79/PDF/PAC1979_3387.PDF) at Brookhaven National Laboratory, on Long Island.  Looking at the specification for the microcomputers will seem quaint today, but this was cutting edge technology then.  This was the first time microprocessors were used to control instrumentation at Brookhaven.  I wrote a program in 8080 assembly language that control three motors to control the movement of a lathe bed.  A magnetic field sensor was placed on the bed, and the application provided a detailed mapping of the magnetic properties of some very large magnet cores that would be used in the National Synchrotron Light Source particle accelerator.\r\n\r\nA few years later I landed at a start up near Boston called Microcom whose flagship product was an early electronic mail program that let Apple ][ users and IBM PC users send emails to each other''s computers using direct modem connections.  This was written in Basic\r\n\r\nWhen [Microcom](http://en.wikipedia.org/wiki/Microcom) decided they could make more money making hardware (modems) than selling software I left to do contracting for various companies around Boston.  Most of this work was written in C for MS DOS machines.  dBASE was the data base component of choice in those days.\r\n\r\nIn the very early days of Windows, it was difficult to write Windows applications in C.  Visual Basic was the quick route to doing that, so I switched over to that.  I did a fair amount of Access development for desktop applications.  Although Access lets the developer create tables and relationships with drag and drop forms, it also would translate the queries to SQL if you asked it.  So, I began to learn SQL. Eventually, when the web arrived, Microsoft created VB Script and ASP for building interactive web sites.  I was a Microsoft developer completely until I came across PHP which was quickly surpassing Perl as the ''cool'' language for website development.  My earlier interest in SQL was useful in making PHP/mySQL websites \r\n\r\nPHP introduced me to the open source world.  This was great because I was doing a lot of small contract website development jobs, and open source development environment was free, while Microsoft went more ''Enterprise'' with the related costs for developers.  I was still using Windows XP at the time, but curious about the emergence of several Linux Distributions.  I tried Knoppix, which you could run directly from a CD in a Windows machine.  Eventually I settled on Ubuntu and left Windows behind for good.\r\n\r\nSince 2008, when I moved to New York City, I have been maintaining a lot of legacy code written in PHP.   A big problem with PHP is that the barrier to entry is so low that lots of unqualified people can ''make things work'' -- sort of!   This gets old quickly.  So for all of my new development I began using Python, and Django.\r\n\r\nWhat''s next?','\r',char(13)),'\n',char(10)),replace('<h2>Early Seeds</h2>\n<p>Somewhere around when I was in 4th grade, my class had a field trip to the Ford River Rouge Assembly plant.  It was fascinating.  The <a href="http://en.wikipedia.org/wiki/Rouge_plant">Rouge Plant</a> was a full service affair.  They made their own steel, their own glass, and ultimately assemble various Fords out of these materials.  This was a giant systems engineering project.  I got to see how it worked!</p>\n<p>I grew up in the late 60s when the NASA space program to reach the moon was a very big thing.  This got me curious about astronomy and I soon found that there was a local astronomy club (<a href="http://ephemeraldetroit.blogspot.com/2011/10/from-what-i-can-ascertain-detroit.html">The Detroit Astronomical Society</a> where more experienced members would help new members built their own telescope.  I built a 6 inch Newtonian telescope, grinding the mirror to a concave spherical shape, and then polished it to a very accurate parabola.  The equatorial mounting was made with a variety of pipe fittings.  So, this was my first engineering project.</p>\n<h2>College</h2>\n<p>I began college expecting to study electrical engineering, especial analog circuit design.  But those were the years of the beginnings of microprocessors.  Digital was taking off in a big way, and it was possible to build your own computer.  I did.  It was an S-100 Z80 system with a North Star floppy disk drive.  To get it to work needed code written in assembly language that interfaced to the keyboard, disk drive and video output cards.  My second engineering project!</p>\n<p>By the time I graduated, I was hooked on software development, having learned how to write assembler code, Pascal, and a little PL/M</p>\n<h2>Professional Path</h2>\n<p><a href="http://groups.google.com/group/alt.psychology.personality/tree/browse_frm/month/1995-03/7126ba5c1e1b0d8f?rnum=21&amp;_done=%2Fgroup%2Falt.psychology.personality%2Fbrowse_frm%2Fmonth%2F1995-03%3F#doc_fb6b7e6b31190bb6">My first appearance on the internet</a> was a post to the alt.psychology.personality use-net group on March 1, 1995.  I haven''t really been interested in the enneagram in some time, but I read a lot about it in the early 90s</p>\n<p>I actually appear as a co author to a <a href="http://accelconf.web.cern.ch/AccelConf/p79/PDF/PAC1979_3387.PDF">paper describing the first project I worked on out of College</a> at Brookhaven National Laboratory, on Long Island.  Looking at the specification for the microcomputers will seem quaint today, but this was cutting edge technology then.  This was the first time microprocessors were used to control instrumentation at Brookhaven.  I wrote a program in 8080 assembly language that control three motors to control the movement of a lathe bed.  A magnetic field sensor was placed on the bed, and the application provided a detailed mapping of the magnetic properties of some very large magnet cores that would be used in the National Synchrotron Light Source particle accelerator.</p>\n<p>A few years later I landed at a start up near Boston called Microcom whose flagship product was an early electronic mail program that let Apple ][ users and IBM PC users send emails to each other''s computers using direct modem connections.  This was written in Basic</p>\n<p>When <a href="http://en.wikipedia.org/wiki/Microcom">Microcom</a> decided they could make more money making hardware (modems) than selling software I left to do contracting for various companies around Boston.  Most of this work was written in C for MS DOS machines.  dBASE was the data base component of choice in those days.</p>\n<p>In the very early days of Windows, it was difficult to write Windows applications in C.  Visual Basic was the quick route to doing that, so I switched over to that.  I did a fair amount of Access development for desktop applications.  Although Access lets the developer create tables and relationships with drag and drop forms, it also would translate the queries to SQL if you asked it.  So, I began to learn SQL. Eventually, when the web arrived, Microsoft created VB Script and ASP for building interactive web sites.  I was a Microsoft developer completely until I came across PHP which was quickly surpassing Perl as the ''cool'' language for website development.  My earlier interest in SQL was useful in making PHP/mySQL websites </p>\n<p>PHP introduced me to the open source world.  This was great because I was doing a lot of small contract website development jobs, and open source development environment was free, while Microsoft went more ''Enterprise'' with the related costs for developers.  I was still using Windows XP at the time, but curious about the emergence of several Linux Distributions.  I tried Knoppix, which you could run directly from a CD in a Windows machine.  Eventually I settled on Ubuntu and left Windows behind for good.</p>\n<p>Since 2008, when I moved to New York City, I have been maintaining a lot of legacy code written in PHP.   A big problem with PHP is that the barrier to entry is so low that lots of unqualified people can ''make things work'' -- sort of!   This gets old quickly.  So for all of my new development I began using Python, and Django.</p>\n<p>What''s next?</p>','\n',char(10)),'2012-10-10 15:31:23',1,1,0,1,'','2020-10-19 16:34:23.192222');
INSERT INTO blog_app_entry VALUES(14,'Migrating from Django 1.3 to 1.6','migrating-django-13-16',replace(replace('I haven''t look at this blog in a couple of years.  It was written with Django 1.3.\r\n\r\nSo, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.','\r',char(13)),'\n',char(10)),replace('<p>I haven''t look at this blog in a couple of years.  It was written with Django 1.3.</p>\n<p>So, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.</p>','\n',char(10)),replace(replace('I haven''t look at this blog in a couple of years.  It was written with Django 1.3.\r\n\r\nSo, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.','\r',char(13)),'\n',char(10)),replace('<p>I haven''t look at this blog in a couple of years.  It was written with Django 1.3.</p>\n<p>So, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.</p>','\n',char(10)),'2014-08-06 15:59:38',1,1,0,1,'','2020-10-19 16:34:18.045393');
INSERT INTO blog_app_entry VALUES(15,'crud test','crud-test','This is an entry using cbv','<p>This is an entry using cbv</p>',replace(replace('You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn’t all that “friendly” to template authors: they have to “just know” that they’re dealing with publishers here.\r\n\r\nWell, if you’re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lower cased version of the model class’ name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list.\r\n\r\nIf this still isn’t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use: new','\r',char(13)),'\n',char(10)),replace('<p>You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn’t all that “friendly” to template authors: they have to “just know” that they’re dealing with publishers here.</p>\n<p>Well, if you’re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lower cased version of the model class’ name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list.</p>\n<p>If this still isn’t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use: new</p>','\n',char(10)),'2014-08-07 13:53:53',1,1,0,1,'','2020-10-19 17:22:35.977172');
INSERT INTO blog_app_entry VALUES(16,'testing cvb','testing-cvb','The above exception (NOT NULL constraint failed: blog_app_entry.enable_commentsThe above exception (NOT NULL constraint failed: blog_app_entry.enable_commentsThe above exception (NOT NULL constraint failed: blog_app_entry.enable_commentsThe above exception (NOT NULL constraint failed: blog_app_entry.enable_comments2C:41:38:8F:DC:27','<p>The above exception (NOT NULL constraint failed: blog_app_entry.enable_commentsThe above exception (NOT NULL constraint failed: blog_app_entry.enable_commentsThe above exception (NOT NULL constraint failed: blog_app_entry.enable_commentsThe above exception (NOT NULL constraint failed: blog_app_entry.enable_comments2C:41:38:8F:DC:27</p>',replace(replace('up vote 60 down vote favorite\r\n28 x\r\n	\r\n\r\nI''m having a bit of trouble understanding how the new CBVs work. My question is this, I need to require login in all the views, and in some of them, specific permissions. In function-based views I do that with @permission_required() and the login_required attribute in the view, but I don''t know how to do this on the new views. Is there some section in the django docs explaining this? I didn''t found anything. What is wrong in my code?','\r',char(13)),'\n',char(10)),replace('<p>up vote 60 down vote favorite\n28 x</p>\n<p>I''m having a bit of trouble understanding how the new CBVs work. My question is this, I need to require login in all the views, and in some of them, specific permissions. In function-based views I do that with @permission_required() and the login_required attribute in the view, but I don''t know how to do this on the new views. Is there some section in the django docs explaining this? I didn''t found anything. What is wrong in my code?</p>','\n',char(10)),'2014-08-12 19:09:00',1,1,1,1,'','2020-10-20 17:13:09.265221');
CREATE INDEX "blog_entry_categories_38a62041" ON "blog_app_entry_categories" ("entry_id");
CREATE INDEX "blog_entry_categories_42dc49bc" ON "blog_app_entry_categories" ("category_id");
CREATE INDEX "blog_entry_56ae2a2a" ON "blog_app_entry" ("slug");
CREATE INDEX "blog_entry_337b96ff" ON "blog_app_entry" ("author_id");
COMMIT;
