[{"fields": {"description": "just a sample category.", "slug": "programming-fun", "title": "Programming for fun"}, "model": "blog_app.category", "pk": 1}, {"fields": {"description": "Anything related to django", "slug": "django", "title": "Django"}, "model": "blog_app.category", "pk": 2}, {"fields": {"description": "general python ", "slug": "python", "title": "python"}, "model": "blog_app.category", "pk": 3}, {"fields": {"description": "various tools", "slug": "tools", "title": "tools"}, "model": "blog_app.category", "pk": 4}, {"fields": {"description": "This is patty's stuff", "slug": "patty", "title": "Patty"}, "model": "blog_app.category", "pk": 5}, {"fields": {"description": "Things that don't fit in other categories", "slug": "misc", "title": "Misc"}, "model": "blog_app.category", "pk": 6}, {"fields": {"description": "About the Vim Editor", "slug": "vim", "title": "Vim"}, "model": "blog_app.category", "pk": 7}, {"fields": {"model": "permission", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 1}, {"fields": {"model": "group", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 2}, {"fields": {"model": "user", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 3}, {"fields": {"model": "contenttype", "app_label": "contenttypes"}, "model": "contenttypes.contenttype", "pk": 4}, {"fields": {"model": "session", "app_label": "sessions"}, "model": "contenttypes.contenttype", "pk": 5}, {"fields": {"model": "site", "app_label": "sites"}, "model": "contenttypes.contenttype", "pk": 6}, {"fields": {"model": "logentry", "app_label": "admin"}, "model": "contenttypes.contenttype", "pk": 7}, {"fields": {"model": "blogpost", "app_label": "blog"}, "model": "contenttypes.contenttype", "pk": 8}, {"fields": {"model": "entry", "app_label": "blog"}, "model": "contenttypes.contenttype", "pk": 9}, {"fields": {"model": "category", "app_label": "blog"}, "model": "contenttypes.contenttype", "pk": 10}, {"fields": {"model": "tag", "app_label": "tagging"}, "model": "contenttypes.contenttype", "pk": 11}, {"fields": {"model": "taggeditem", "app_label": "tagging"}, "model": "contenttypes.contenttype", "pk": 12}, {"fields": {"model": "category", "app_label": "blog_app"}, "model": "contenttypes.contenttype", "pk": 14}, {"fields": {"model": "entry", "app_label": "blog_app"}, "model": "contenttypes.contenttype", "pk": 15}, {"fields": {"model": "link", "app_label": "blog_app"}, "model": "contenttypes.contenttype", "pk": 16}, {"fields": {"expire_date": "2016-03-13T18:55:57.857Z", "session_data": "M2QwNzkwZjFjYjg2MmZlZjhiZDgzOWQ1OWEyMjE1NjI0Y2NlNTk1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3NGY4MDBmOWM4MDRhYTIxZDI3NTQ3NGJiNWE4MDc5NjU3ZDhjODQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0="}, "model": "sessions.session", "pk": "129ts7eflctl7jtdj48buhhyensobi86"}, {"fields": {"expire_date": "2012-11-09T13:17:59.919Z", "session_data": "MDQwZTc5ZDM2N2RmY2RiMWI2ZTk1NGFiY2FlNGVhNzgzNTc4ZjI1NTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}, "model": "sessions.session", "pk": "15446ea00131259d706624bac6f7b290"}, {"fields": {"expire_date": "2012-10-23T13:04:00.601Z", "session_data": "MzU5NzA3Y2QxMzJiNzA3MmI3NGI3Zjc3N2UyZjQ3ZDY4MTZiYmEyNDqAAn1xAShVBmFuc3dlcksb\nVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2Rl\nbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwFVC2xhc3RfYW5zd2VySyB1Lg==\n"}, "model": "sessions.session", "pk": "1585f1d303548bf7bb36a9d2a96f4c6f"}, {"fields": {"expire_date": "2014-08-19T21:06:54.158Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "22zsf44jkhvvg2x37lbvak6bamroy8ia"}, {"fields": {"expire_date": "2012-10-02T17:08:54.085Z", "session_data": "MDQwZTc5ZDM2N2RmY2RiMWI2ZTk1NGFiY2FlNGVhNzgzNTc4ZjI1NTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}, "model": "sessions.session", "pk": "2ef11c839c9a5cd5afa10bfb141b8720"}, {"fields": {"expire_date": "2012-10-18T13:03:58.619Z", "session_data": "ZmEwNDJiMWQzMTgzZjA2ZWE3YTRhNjI4YWJmZjNkMzE2NzViMWQ0OTqAAn1xAShVBmFuc3dlcksf\nVQtsYXN0X2Fuc3dlckseVRJfYXV0aF91c2VyX2JhY2tlbmRVKWRqYW5nby5jb250cmliLmF1dGgu\nYmFja2VuZHMuTW9kZWxCYWNrZW5kVQ1fYXV0aF91c2VyX2lkSwF1Lg==\n"}, "model": "sessions.session", "pk": "30f25dcbbbd657329ea847ce892838fe"}, {"fields": {"expire_date": "2016-04-12T16:24:46.728Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "3vczwfy700fuwnm9onjstn89rpa9ry2i"}, {"fields": {"expire_date": "2012-12-13T16:26:32.312Z", "session_data": "MDQwZTc5ZDM2N2RmY2RiMWI2ZTk1NGFiY2FlNGVhNzgzNTc4ZjI1NTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}, "model": "sessions.session", "pk": "6b373cf87b38072178633d7781b1c388"}, {"fields": {"expire_date": "2016-04-09T15:07:35.182Z", "session_data": "M2QwNzkwZjFjYjg2MmZlZjhiZDgzOWQ1OWEyMjE1NjI0Y2NlNTk1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3NGY4MDBmOWM4MDRhYTIxZDI3NTQ3NGJiNWE4MDc5NjU3ZDhjODQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0="}, "model": "sessions.session", "pk": "7p4bvifnknhakacyk4kv3g5z2pyhbfrv"}, {"fields": {"expire_date": "2013-01-23T16:02:12.989Z", "session_data": "MDQwZTc5ZDM2N2RmY2RiMWI2ZTk1NGFiY2FlNGVhNzgzNTc4ZjI1NTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}, "model": "sessions.session", "pk": "b0b13eff89cee0d4e0904bb501ed4579"}, {"fields": {"expire_date": "2012-12-13T16:46:54.689Z", "session_data": "Mzc3MGE1ZjA1NTExN2JmOTg0NjJiNTNhZTUxYjQxMDFiZGYyOTc0ZDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}, "model": "sessions.session", "pk": "f0832e5b1f767d7baaa558958fe4cd08"}, {"fields": {"expire_date": "2012-10-09T12:49:31.948Z", "session_data": "MDQwZTc5ZDM2N2RmY2RiMWI2ZTk1NGFiY2FlNGVhNzgzNTc4ZjI1NTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}, "model": "sessions.session", "pk": "f78468b55cc7fdc00b18ee9e33624c5f"}, {"fields": {"expire_date": "2015-02-24T21:38:33.436Z", "session_data": "ZjRmYzFiOTI4MWRhN2I2MzU4MzA3N2JkZjU3OGE2Y2YyOGVmZTViZDp7ImFuc3dlciI6NTEsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MSwibGFzdF9hbnN3ZXIiOjMzfQ=="}, "model": "sessions.session", "pk": "fwa10ke6ook2fnz5xixbwt475yr091cy"}, {"fields": {"expire_date": "2016-04-13T17:10:55.039Z", "session_data": "NjMyZTBkNmE4ZGEzZWE4NzQ4MGY0YTgxODE4Y2FhZTI3ZWJmMjU4OTp7ImFuc3dlciI6NDQsImxhc3RfYW5zd2VyIjo0OSwiX2F1dGhfdXNlcl9oYXNoIjoiZTc0ZjgwMGY5YzgwNGFhMjFkMjc1NDc0YmI1YTgwNzk2NTdkOGM4NCIsIl9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "irkz0bjd3vydxaj277pafrktckdvqd6d"}, {"fields": {"expire_date": "2016-04-12T16:28:16.347Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "lhyfel0nlgahl21f2uxh2vdebaa64fv8"}, {"fields": {"expire_date": "2016-04-12T16:23:32.272Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "ml063d7rxq7owi6dgf36d9gcf2o2b7bh"}, {"fields": {"expire_date": "2015-06-10T16:06:10.715Z", "session_data": "MzgxOTVlZjkxYTcyMzIwYzMwNWNmZTI1NjAxMDEyMTQwY2IwZWYyMjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}, "model": "sessions.session", "pk": "nmf6nue6w6a12bjldixlurkajbmk13x0"}, {"fields": {"expire_date": "2016-04-12T16:23:21.885Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "s02k3yevccdj44lry52piguay1d86t5w"}, {"fields": {"expire_date": "2016-04-12T16:23:31.202Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "s200ey73sjeezq1zjx34swoig9d4o810"}, {"fields": {"expire_date": "2015-07-06T17:56:51.628Z", "session_data": "MDZmMjNmNjdlNDZhMDZiM2ZjNGM1NTk1NDRmYTg5MzExMjRhNjIwODp7ImFuc3dlciI6MTcsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MSwibGFzdF9hbnN3ZXIiOjE4fQ=="}, "model": "sessions.session", "pk": "sw0he17gg4lfzlic4951i02tpjbrpesz"}, {"fields": {"expire_date": "2014-08-26T19:36:00.689Z", "session_data": "MzgxOTVlZjkxYTcyMzIwYzMwNWNmZTI1NjAxMDEyMTQwY2IwZWYyMjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}, "model": "sessions.session", "pk": "tbmlo5edfos4do4h9i2tz89ko3c2cfow"}, {"fields": {"expire_date": "2016-04-11T16:54:21.714Z", "session_data": "M2QwNzkwZjFjYjg2MmZlZjhiZDgzOWQ1OWEyMjE1NjI0Y2NlNTk1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3NGY4MDBmOWM4MDRhYTIxZDI3NTQ3NGJiNWE4MDc5NjU3ZDhjODQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0="}, "model": "sessions.session", "pk": "ucv1qhe3k1mso5bhej63ivz3sfyeavc5"}, {"fields": {"expire_date": "2014-08-19T21:00:57.459Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "yv11d0pfs19r88bii2u28vp8ng9487tr"}, {"fields": {"expire_date": "2016-04-12T16:27:31.202Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "z0ds9bcy4ge5pwex1roldplf4g1mwjqr"}, {"fields": {"expire_date": "2016-04-12T16:22:54.943Z", "session_data": "YzU3YmVhZDMwNGY2ZTNlYWQ1NWFkYTBhNGQzM2VjYzM2ZDJlYzRjYTp7fQ=="}, "model": "sessions.session", "pk": "z2yce4dfeuyunzzkuds4jm7y3pjkj85j"}, {"fields": {"codename": "add_group", "name": "Can add group", "content_type": 2}, "model": "auth.permission", "pk": 1}, {"fields": {"codename": "add_permission", "name": "Can add permission", "content_type": 1}, "model": "auth.permission", "pk": 2}, {"fields": {"codename": "add_user", "name": "Can add user", "content_type": 3}, "model": "auth.permission", "pk": 3}, {"fields": {"codename": "change_group", "name": "Can change group", "content_type": 2}, "model": "auth.permission", "pk": 4}, {"fields": {"codename": "change_permission", "name": "Can change permission", "content_type": 1}, "model": "auth.permission", "pk": 5}, {"fields": {"codename": "change_user", "name": "Can change user", "content_type": 3}, "model": "auth.permission", "pk": 6}, {"fields": {"codename": "delete_group", "name": "Can delete group", "content_type": 2}, "model": "auth.permission", "pk": 7}, {"fields": {"codename": "delete_permission", "name": "Can delete permission", "content_type": 1}, "model": "auth.permission", "pk": 8}, {"fields": {"codename": "delete_user", "name": "Can delete user", "content_type": 3}, "model": "auth.permission", "pk": 9}, {"fields": {"codename": "add_contenttype", "name": "Can add content type", "content_type": 4}, "model": "auth.permission", "pk": 10}, {"fields": {"codename": "change_contenttype", "name": "Can change content type", "content_type": 4}, "model": "auth.permission", "pk": 11}, {"fields": {"codename": "delete_contenttype", "name": "Can delete content type", "content_type": 4}, "model": "auth.permission", "pk": 12}, {"fields": {"codename": "add_session", "name": "Can add session", "content_type": 5}, "model": "auth.permission", "pk": 13}, {"fields": {"codename": "change_session", "name": "Can change session", "content_type": 5}, "model": "auth.permission", "pk": 14}, {"fields": {"codename": "delete_session", "name": "Can delete session", "content_type": 5}, "model": "auth.permission", "pk": 15}, {"fields": {"codename": "add_site", "name": "Can add site", "content_type": 6}, "model": "auth.permission", "pk": 16}, {"fields": {"codename": "change_site", "name": "Can change site", "content_type": 6}, "model": "auth.permission", "pk": 17}, {"fields": {"codename": "delete_site", "name": "Can delete site", "content_type": 6}, "model": "auth.permission", "pk": 18}, {"fields": {"codename": "add_logentry", "name": "Can add log entry", "content_type": 7}, "model": "auth.permission", "pk": 19}, {"fields": {"codename": "change_logentry", "name": "Can change log entry", "content_type": 7}, "model": "auth.permission", "pk": 20}, {"fields": {"codename": "delete_logentry", "name": "Can delete log entry", "content_type": 7}, "model": "auth.permission", "pk": 21}, {"fields": {"codename": "add_blogpost", "name": "Can add blog post", "content_type": 8}, "model": "auth.permission", "pk": 22}, {"fields": {"codename": "change_blogpost", "name": "Can change blog post", "content_type": 8}, "model": "auth.permission", "pk": 23}, {"fields": {"codename": "delete_blogpost", "name": "Can delete blog post", "content_type": 8}, "model": "auth.permission", "pk": 24}, {"fields": {"codename": "add_category", "name": "Can add category", "content_type": 10}, "model": "auth.permission", "pk": 25}, {"fields": {"codename": "add_entry", "name": "Can add entry", "content_type": 9}, "model": "auth.permission", "pk": 26}, {"fields": {"codename": "change_category", "name": "Can change category", "content_type": 10}, "model": "auth.permission", "pk": 27}, {"fields": {"codename": "change_entry", "name": "Can change entry", "content_type": 9}, "model": "auth.permission", "pk": 28}, {"fields": {"codename": "delete_category", "name": "Can delete category", "content_type": 10}, "model": "auth.permission", "pk": 29}, {"fields": {"codename": "delete_entry", "name": "Can delete entry", "content_type": 9}, "model": "auth.permission", "pk": 30}, {"fields": {"codename": "add_tag", "name": "Can add tag", "content_type": 11}, "model": "auth.permission", "pk": 31}, {"fields": {"codename": "add_taggeditem", "name": "Can add tagged item", "content_type": 12}, "model": "auth.permission", "pk": 32}, {"fields": {"codename": "change_tag", "name": "Can change tag", "content_type": 11}, "model": "auth.permission", "pk": 33}, {"fields": {"codename": "change_taggeditem", "name": "Can change tagged item", "content_type": 12}, "model": "auth.permission", "pk": 34}, {"fields": {"codename": "delete_tag", "name": "Can delete tag", "content_type": 11}, "model": "auth.permission", "pk": 35}, {"fields": {"codename": "delete_taggeditem", "name": "Can delete tagged item", "content_type": 12}, "model": "auth.permission", "pk": 36}, {"fields": {"codename": "add_category", "name": "Can add category", "content_type": 14}, "model": "auth.permission", "pk": 40}, {"fields": {"codename": "change_category", "name": "Can change category", "content_type": 14}, "model": "auth.permission", "pk": 41}, {"fields": {"codename": "delete_category", "name": "Can delete category", "content_type": 14}, "model": "auth.permission", "pk": 42}, {"fields": {"codename": "add_entry", "name": "Can add entry", "content_type": 15}, "model": "auth.permission", "pk": 43}, {"fields": {"codename": "change_entry", "name": "Can change entry", "content_type": 15}, "model": "auth.permission", "pk": 44}, {"fields": {"codename": "delete_entry", "name": "Can delete entry", "content_type": 15}, "model": "auth.permission", "pk": 45}, {"fields": {"codename": "add_link", "name": "Can add link", "content_type": 16}, "model": "auth.permission", "pk": 46}, {"fields": {"codename": "change_link", "name": "Can change link", "content_type": 16}, "model": "auth.permission", "pk": 47}, {"fields": {"codename": "delete_link", "name": "Can delete link", "content_type": 16}, "model": "auth.permission", "pk": 48}, {"fields": {"username": "jcg", "first_name": "", "last_name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2016-03-29T16:28:55.410Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$20000$rSXmpMHwA7Nq$6UGYnRpAHvwvR7oX9G4S7U17zrVf7wA2jFNuZfkWgh4=", "email": "joel.goldstick@gmail.com", "date_joined": "2012-09-18T14:58:51.240Z"}, "model": "auth.user", "pk": 1}, {"fields": {"username": "patty", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": true, "last_login": "2014-08-12T19:29:35.952Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$12000$xhATf2vl6vJK$vBch9cDPXTC/rer0kI0Wkw0ceLk8ka4gU3pL2iL9cgQ=", "email": "", "date_joined": "2012-10-13T11:15:06Z"}, "model": "auth.user", "pk": 2}, {"fields": {"action_flag": 1, "action_time": "2012-09-18T16:25:44.447Z", "object_repr": "BlogPost object", "object_id": "1", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 1}, {"fields": {"action_flag": 1, "action_time": "2012-09-18T16:43:40.078Z", "object_repr": "BlogPost object", "object_id": "2", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 2}, {"fields": {"action_flag": 1, "action_time": "2012-09-18T17:10:51.590Z", "object_repr": "BlogPost object", "object_id": "3", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 3}, {"fields": {"action_flag": 2, "action_time": "2012-09-18T17:12:48.274Z", "object_repr": "BlogPost object", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 4}, {"fields": {"action_flag": 1, "action_time": "2012-09-18T17:16:03.886Z", "object_repr": "testing unicode ", "object_id": "4", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 5}, {"fields": {"action_flag": 2, "action_time": "2012-09-18T17:16:12.314Z", "object_repr": "post 3", "object_id": "3", "change_message": "No fields changed.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 6}, {"fields": {"action_flag": 2, "action_time": "2012-09-18T17:16:16.723Z", "object_repr": "testing unicode ", "object_id": "4", "change_message": "No fields changed.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 7}, {"fields": {"action_flag": 1, "action_time": "2012-09-18T18:05:01.519Z", "object_repr": "Once upon a time", "object_id": "5", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 8}, {"fields": {"action_flag": 2, "action_time": "2012-09-18T18:15:38.373Z", "object_repr": "post 3", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 9}, {"fields": {"action_flag": 1, "action_time": "2012-09-19T11:55:02.552Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 10}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T11:57:18.355Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 11}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T11:58:18.845Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 12}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T12:33:47.343Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 13}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T12:37:13.575Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 14}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T12:37:22.782Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 15}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T12:37:57.735Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 16}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T12:38:28.668Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 17}, {"fields": {"action_flag": 1, "action_time": "2012-09-19T13:24:22.587Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 18}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:24:58.970Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 19}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:27:14.215Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 20}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:29:27.137Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 21}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:29:50.088Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 22}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:38:50.081Z", "object_repr": "Deploying with mod_wsgi", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 23}, {"fields": {"action_flag": 1, "action_time": "2012-09-19T13:39:50.355Z", "object_repr": "A great wsgi tutorial", "object_id": "8", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 24}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:40:01.632Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "No fields changed.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 25}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:40:52.344Z", "object_repr": "A great wsgi tutorial", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 26}, {"fields": {"action_flag": 2, "action_time": "2012-09-19T13:47:16.009Z", "object_repr": "The wsgi files", "object_id": "7", "change_message": "No fields changed.", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 27}, {"fields": {"action_flag": 1, "action_time": "2012-09-19T18:13:47.230Z", "object_repr": "pygments and markdown and git", "object_id": "9", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 28}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T13:23:31.710Z", "object_repr": "Programming for fun", "object_id": "1", "change_message": "", "user": 1, "content_type": 10}, "model": "admin.logentry", "pk": 29}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T13:34:13.075Z", "object_repr": "Django", "object_id": "2", "change_message": "", "user": 1, "content_type": 10}, "model": "admin.logentry", "pk": 30}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T13:34:23.218Z", "object_repr": "python", "object_id": "3", "change_message": "", "user": 1, "content_type": 10}, "model": "admin.logentry", "pk": 31}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T16:34:50.320Z", "object_repr": "First Blog Entry Test", "object_id": "1", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 32}, {"fields": {"action_flag": 2, "action_time": "2012-09-20T16:57:16.616Z", "object_repr": "First Blog Entry Test", "object_id": "1", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 33}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T16:58:49.864Z", "object_repr": "Making a weblog", "object_id": "2", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 34}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T17:07:37.401Z", "object_repr": "my apache2.conf file", "object_id": "3", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 35}, {"fields": {"action_flag": 2, "action_time": "2012-09-20T19:28:15.199Z", "object_repr": "my apache2.conf file", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 36}, {"fields": {"action_flag": 2, "action_time": "2012-09-20T19:39:33.207Z", "object_repr": "my apache2.conf file", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 37}, {"fields": {"action_flag": 2, "action_time": "2012-09-20T19:41:45.912Z", "object_repr": "my apache2.conf file", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 38}, {"fields": {"action_flag": 1, "action_time": "2012-09-20T19:44:59.959Z", "object_repr": "Models for this blog", "object_id": "4", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 39}, {"fields": {"action_flag": 2, "action_time": "2012-09-20T19:54:10.017Z", "object_repr": "Models for this blog", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 40}, {"fields": {"action_flag": 1, "action_time": "2012-09-21T13:59:28.764Z", "object_repr": "\u029d\u03c3\u025b\u2113.\u0262\u03c3\u2113\u2202\u01a8\u0442\u03b9c\u03ba@\u0262\u043c\u03b1\u03b9\u2113.c\u03c3\u043c", "object_id": "10", "change_message": "", "user": 1, "content_type": 8}, "model": "admin.logentry", "pk": 41}, {"fields": {"action_flag": 1, "action_time": "2012-09-21T14:01:44.060Z", "object_repr": "tools", "object_id": "4", "change_message": "", "user": 1, "content_type": 10}, "model": "admin.logentry", "pk": 42}, {"fields": {"action_flag": 1, "action_time": "2012-09-21T14:01:48.011Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 43}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T14:02:45.960Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 44}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:12:56.414Z", "object_repr": "Making a weblog", "object_id": "2", "change_message": "Changed tags.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 45}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:13:10.695Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed tags.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 46}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:23:49.791Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 47}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:27:34.985Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 48}, {"fields": {"action_flag": 1, "action_time": "2012-09-21T17:29:07.595Z", "object_repr": "Markdown", "object_id": "6", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 49}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:36:28.420Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 50}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:37:03.498Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 51}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:42:43.635Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 52}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:43:53.034Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 53}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:47:46.823Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 54}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:48:16.838Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 55}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:55:07.009Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 56}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T17:57:07.891Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 57}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T18:23:39.924Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 58}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T18:25:21.943Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 59}, {"fields": {"action_flag": 2, "action_time": "2012-09-21T18:26:23.992Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 60}, {"fields": {"action_flag": 1, "action_time": "2012-09-24T12:43:51.764Z", "object_repr": "Restart Apache", "object_id": "7", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 61}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T13:24:13.006Z", "object_repr": "Restart Apache, , view logs", "object_id": "7", "change_message": "Changed title, slug and excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 62}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T13:24:36.444Z", "object_repr": "Restart Apache, , view logs", "object_id": "7", "change_message": "Changed slug.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 63}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T13:25:12.054Z", "object_repr": "Restart Apache, view logs", "object_id": "7", "change_message": "Changed title and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 64}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T13:25:51.860Z", "object_repr": "Restart Apache, view logs", "object_id": "7", "change_message": "Changed excerpt and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 65}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:38:53.713Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 66}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:41:09.765Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 67}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:41:42.532Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 68}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:42:46.853Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 69}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:45:59.534Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 70}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:47:07.822Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 71}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:48:20.700Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 72}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:50:12.637Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 73}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:51:21.432Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 74}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:54:28.158Z", "object_repr": "Markdown", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 75}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:55:35.719Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 76}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T14:57:34.995Z", "object_repr": "Markdown", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 77}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T15:00:15.899Z", "object_repr": "Markdown x", "object_id": "6", "change_message": "Changed title.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 78}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T15:01:22.212Z", "object_repr": "Markdown x", "object_id": "6", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 79}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T15:02:17.511Z", "object_repr": "Markdown x", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 80}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T15:03:27.967Z", "object_repr": "Markdown x", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 81}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T15:12:27.146Z", "object_repr": "Markdown x", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 82}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T15:15:06.632Z", "object_repr": "Markdown x", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 83}, {"fields": {"action_flag": 2, "action_time": "2012-09-24T18:19:12.564Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed title.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 84}, {"fields": {"action_flag": 1, "action_time": "2012-09-25T12:51:33.588Z", "object_repr": "Moving to AWS and ECS", "object_id": "8", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 85}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T12:52:56.081Z", "object_repr": "Moving to AWS and EC2", "object_id": "8", "change_message": "Changed title.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 86}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T13:28:09.173Z", "object_repr": "Moving to AWS and EC2", "object_id": "8", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 87}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T13:28:53.602Z", "object_repr": "Restart Apache, view logs", "object_id": "7", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 88}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T13:29:05.386Z", "object_repr": "Markdown", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 89}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T13:29:46.104Z", "object_repr": "my apache2.conf file", "object_id": "3", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 90}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T13:48:09.514Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed excerpt.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 91}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:10:29.210Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 92}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:11:05.404Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 93}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:12:47.164Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 94}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:15:31.622Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 95}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:25:02.584Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 96}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:28:59.642Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 97}, {"fields": {"action_flag": 2, "action_time": "2012-09-25T20:30:13.679Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 98}, {"fields": {"action_flag": 2, "action_time": "2012-09-26T12:10:17.759Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 99}, {"fields": {"action_flag": 2, "action_time": "2012-09-26T12:11:36.325Z", "object_repr": "Markdown", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 100}, {"fields": {"action_flag": 2, "action_time": "2012-09-26T14:52:46.393Z", "object_repr": "Markdown", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 101}, {"fields": {"action_flag": 2, "action_time": "2012-09-26T14:54:09.502Z", "object_repr": "Markdown", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 102}, {"fields": {"action_flag": 1, "action_time": "2012-09-27T12:29:45.458Z", "object_repr": "My ESPN Developer Account into", "object_id": "9", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 103}, {"fields": {"action_flag": 2, "action_time": "2012-09-27T12:30:49.225Z", "object_repr": "My ESPN Developer Account into", "object_id": "9", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 104}, {"fields": {"action_flag": 1, "action_time": "2012-09-27T19:04:39.128Z", "object_repr": "Patty", "object_id": "5", "change_message": "", "user": 1, "content_type": 10}, "model": "admin.logentry", "pk": 105}, {"fields": {"action_flag": 1, "action_time": "2012-09-27T19:05:58.978Z", "object_repr": "A Sample", "object_id": "10", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 106}, {"fields": {"action_flag": 2, "action_time": "2012-09-29T15:26:04.623Z", "object_repr": "127.0.0.100", "object_id": "1", "change_message": "Changed domain and name.", "user": 1, "content_type": 6}, "model": "admin.logentry", "pk": 107}, {"fields": {"action_flag": 1, "action_time": "2012-09-30T13:06:25.342Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 108}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:15:28.886Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 109}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:19:51.370Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 110}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:30:59.217Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 111}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:31:45.407Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 112}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:31:54.462Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 113}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:33:46.699Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 114}, {"fields": {"action_flag": 2, "action_time": "2012-09-30T13:36:04.721Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 115}, {"fields": {"action_flag": 2, "action_time": "2012-10-01T13:36:56.634Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 116}, {"fields": {"action_flag": 2, "action_time": "2012-10-01T13:56:09.574Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 117}, {"fields": {"action_flag": 2, "action_time": "2012-10-01T13:57:36.716Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 118}, {"fields": {"action_flag": 2, "action_time": "2012-10-01T14:04:41.081Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 119}, {"fields": {"action_flag": 2, "action_time": "2012-10-01T18:19:39.373Z", "object_repr": "Django Forms", "object_id": "11", "change_message": "No fields changed.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 120}, {"fields": {"action_flag": 1, "action_time": "2012-10-10T15:31:00.456Z", "object_repr": "Misc", "object_id": "6", "change_message": "", "user": 1, "content_type": 10}, "model": "admin.logentry", "pk": 121}, {"fields": {"action_flag": 1, "action_time": "2012-10-10T15:32:26.137Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 122}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T15:44:33.368Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 123}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T15:58:40.944Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 124}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T15:59:33.035Z", "object_repr": "Restart Apache, view logs", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 125}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T16:25:11.481Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 126}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T16:38:00.558Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 127}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T16:47:12.735Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 128}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T16:47:49.640Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 129}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T17:15:11.699Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 130}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T17:20:09.250Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 131}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T17:24:22.665Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 132}, {"fields": {"action_flag": 2, "action_time": "2012-10-10T17:46:25.289Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 133}, {"fields": {"action_flag": 2, "action_time": "2012-10-12T13:22:38.181Z", "object_repr": "Moving to AWS -- EC2 and S3", "object_id": "8", "change_message": "Changed title, excerpt and body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 134}, {"fields": {"action_flag": 2, "action_time": "2012-10-12T13:35:12.889Z", "object_repr": "Moving to AWS -- EC2 and S3", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 135}, {"fields": {"action_flag": 2, "action_time": "2012-10-12T17:49:41.620Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 136}, {"fields": {"action_flag": 1, "action_time": "2012-10-13T11:15:07.063Z", "object_repr": "patty", "object_id": "2", "change_message": "", "user": 1, "content_type": 3}, "model": "admin.logentry", "pk": 137}, {"fields": {"action_flag": 2, "action_time": "2012-10-13T11:16:55.733Z", "object_repr": "patty", "object_id": "2", "change_message": "Changed password and is_staff.", "user": 1, "content_type": 3}, "model": "admin.logentry", "pk": 138}, {"fields": {"action_flag": 3, "action_time": "2012-10-26T13:18:34.244Z", "object_repr": "A Sample", "object_id": "10", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 139}, {"fields": {"action_flag": 3, "action_time": "2012-10-26T13:18:34.354Z", "object_repr": "First Blog Entry Test", "object_id": "1", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 140}, {"fields": {"action_flag": 2, "action_time": "2012-10-26T13:19:21.325Z", "object_repr": "My ESPN Developer Account into", "object_id": "9", "change_message": "Changed status.", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 141}, {"fields": {"action_flag": 1, "action_time": "2013-01-09T17:14:43.682Z", "object_repr": "Mac Mini", "object_id": "13", "change_message": "", "user": 1, "content_type": 9}, "model": "admin.logentry", "pk": 142}, {"fields": {"action_flag": 2, "action_time": "2013-01-09T20:33:54.212Z", "object_repr": "joel.goldstick.com", "object_id": "1", "change_message": "Changed domain.", "user": 1, "content_type": 6}, "model": "admin.logentry", "pk": 143}, {"fields": {"action_flag": 1, "action_time": "2014-08-06T16:00:35.734Z", "object_repr": "Migrating from Django 1.3 to 1.6", "object_id": "14", "change_message": "", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 145}, {"fields": {"action_flag": 2, "action_time": "2015-02-09T14:28:30.874Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 146}, {"fields": {"action_flag": 2, "action_time": "2015-02-09T14:29:59.628Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 147}, {"fields": {"action_flag": 2, "action_time": "2015-02-09T14:47:16.684Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 148}, {"fields": {"action_flag": 2, "action_time": "2015-02-09T15:14:12.658Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 149}, {"fields": {"action_flag": 2, "action_time": "2015-02-09T15:21:49.236Z", "object_repr": "Creating obfuscated unicode from plaintext", "object_id": "5", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 150}, {"fields": {"action_flag": 3, "action_time": "2015-05-27T16:07:06.047Z", "object_repr": "Mac Mini", "object_id": "13", "change_message": "", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 151}, {"fields": {"action_flag": 2, "action_time": "2015-05-27T16:17:49.896Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 152}, {"fields": {"action_flag": 2, "action_time": "2015-05-27T16:19:32.302Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 153}, {"fields": {"action_flag": 2, "action_time": "2015-05-27T17:02:02.141Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 154}, {"fields": {"action_flag": 2, "action_time": "2015-05-27T19:11:50.180Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 155}, {"fields": {"action_flag": 2, "action_time": "2016-03-26T15:08:09.057Z", "object_repr": "Making a weblog", "object_id": "2", "change_message": "Changed modified_date.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 156}, {"fields": {"action_flag": 1, "action_time": "2016-03-29T16:44:30.658Z", "object_repr": "Vim", "object_id": "7", "change_message": "", "user": 1, "content_type": 14}, "model": "admin.logentry", "pk": 157}, {"fields": {"action_flag": 2, "action_time": "2016-03-29T17:18:30.632Z", "object_repr": "How I Got here", "object_id": "12", "change_message": "Changed body and modified_date.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 158}, {"fields": {"action_flag": 2, "action_time": "2016-03-30T17:20:24.442Z", "object_repr": "testing cvb", "object_id": "16", "change_message": "Changed excerpt and modified_date.", "user": 1, "content_type": 15}, "model": "admin.logentry", "pk": 159}, {"fields": {"body": "How to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. \r\n\r\n So, in my home 'workshop' I'm using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. \r\n\r\n I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.\r\nHow to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. \r\n\r\n So, in my home 'workshop' I'm using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. \r\n\r\n I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.", "excerpt_html": "<p>I am making a weblog using the code in Practical Django Projects as a guide.</p>\n<p>Additional text to see if update works</p>", "title": "Making a weblog", "author": 1, "excerpt": "I am making a weblog using the code in Practical Django Projects as a guide.\r\n\r\nAdditional text to see if update works", "body_html": "<p>How to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. </p>\n<p>So, in my home 'workshop' I'm using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. </p>\n<p>I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.\nHow to make django work with mod_wsgi in python. The first time I tried to do this was at work using django 1.3 with code from a project that I was working on. I started getting server errors (500), and I went on to other work. </p>\n<p>So, in my home 'workshop' I'm using django 1.4. I created a very minimal project roughly using the example in Python Web Develoment with Django by Jeff Forcier, Paul Bissex and Wesley Chun. (Addison Wesley). The project has no dependencies. </p>\n<p>I read the django official documents at How to use Django with Apache and mod_wsg. From that article I modified my apache2.conf file. In the article they refer to httpd.conf, but on my Ubuntu system that file is empty and there is another called apache2.conf which seems to be used instead.</p>", "modified_date": "2016-03-26T15:07:57Z", "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-20T16:57:16Z", "slug": "making-weblog", "categories": [2]}, "model": "blog_app.entry", "pk": 2}, {"fields": {"body": "<p>Here is my wsgi.py file.  It lives in <code>/home/jcg/code/learning/myapp/myapp/wsgi.py</code></p>\r\n    :::python\r\n    import os, sys\r\n\r\n    sys.path.append('/home/jcg/code/learn')\r\n    sys.path.append('/home/jcg/code/learn/myapp')\r\n\r\n\r\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myapp.settings\")\r\n\r\n    # This application object is used by any WSGI server configured to use this\r\n    # file. This includes Django's development server, if the WSGI_APPLICATION\r\n    # setting points here.\r\n    from django.core.wsgi import get_wsgi_application\r\n    application = get_wsgi_application()\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nHere is the code in <code>/etc/apache2/apache2.conf</code>\r\n</p>\r\n\r\n    :::apache\r\n    # https://docs.djangoproject.com/en/1.4/howto/deployment/wsgi/modwsgi/\r\n    # jcg 9/18/2012\r\n    Alias /media/ /home/jcg/code/learn/media/\r\n\r\n    <Directory /home/jcg/code/learn/media>\r\n    Order deny,allow\r\n    Allow from all\r\n    </Directory>\r\n\r\n    WSGIScriptAlias / /home/jcg/code/learn//myapp/myapp/wsgi.py\r\n    WSGIPythonPath /home/jcg/code/learn/lib/python2.7/site-packages\r\n\r\n    <Directory /home/jcg/code/learn/myapp>\r\n    Order deny,allow\r\n    Allow from all\r\n    </Directory>\r\n", "excerpt_html": "<p>This is to get mod_wsgi to run</p>", "title": "my apache2.conf file", "author": 1, "excerpt": "This is to get mod_wsgi to run", "body_html": "<p>Here is my wsgi.py file.  It lives in <code>/home/jcg/code/learning/myapp/myapp/wsgi.py</code></p>\n\n<div class=\"codehilite\"><pre><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">&#39;/home/jcg/code/learn&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">&#39;/home/jcg/code/learn/myapp&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s\">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;myapp.settings&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c\"># This application object is used by any WSGI server configured to use this</span>\n<span class=\"c\"># file. This includes Django&#39;s development server, if the WSGI_APPLICATION</span>\n<span class=\"c\"># setting points here.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">get_wsgi_application</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p></code>\n</pre></p>\n<p>\nHere is the code in <code>/etc/apache2/apache2.conf</code>\n</p>\n\n<div class=\"codehilite\"><pre><span class=\"c\"># https://docs.djangoproject.com/en/1.4/howto/deployment/wsgi/modwsgi/</span>\n<span class=\"c\"># jcg 9/18/2012</span>\n<span class=\"nb\">Alias</span> <span class=\"sx\">/media/</span> <span class=\"sx\">/home/jcg/code/learn/media/</span>\n\n<span class=\"nt\">&lt;Directory</span> <span class=\"s\">/home/jcg/code/learn/media</span><span class=\"nt\">&gt;</span>\n<span class=\"nb\">Order</span> deny,allow\n<span class=\"nb\">Allow</span> from <span class=\"k\">all</span>\n<span class=\"nt\">&lt;/Directory&gt;</span>\n\n<span class=\"nb\">WSGIScriptAlias</span> / <span class=\"sx\">/home/jcg/code/learn//myapp/myapp/wsgi.py</span>\n<span class=\"nb\">WSGIPythonPath</span> <span class=\"sx\">/home/jcg/code/learn/lib/python2.7/site-packages</span>\n\n<span class=\"nt\">&lt;Directory</span> <span class=\"s\">/home/jcg/code/learn/myapp</span><span class=\"nt\">&gt;</span>\n<span class=\"nb\">Order</span> deny,allow\n<span class=\"nb\">Allow</span> from <span class=\"k\">all</span>\n<span class=\"nt\">&lt;/Directory&gt;</span>\n</pre></div>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-20T17:07:03Z", "slug": "my-apache2conf-file", "categories": [2, 3]}, "model": "blog_app.entry", "pk": 3}, {"fields": {"body": "Here is the code in models.py for the blog application\r\n\r\n    :::python\r\n    from django.db import models\r\n    from django.contrib import admin\r\n    from markdown import markdown\r\n    import datetime\r\n    from django.contrib.auth.models import User\r\n    from tagging.fields import TagField\r\n\r\n    # Create your models here.\r\n    class BlogPost(models.Model):\r\n        title = models.CharField(max_length=150)\r\n        body = models.TextField()\r\n        timestamp = models.DateTimeField(auto_now_add=True, blank=True)\r\n        \r\n        def __unicode__(self):\r\n            return self.title\r\n        \r\n    class BlogPostAdmin(admin.ModelAdmin):\r\n        list_display = ['title', 'timestamp', 'pk']\r\n    admin.site.register(BlogPost, BlogPostAdmin)\r\n\r\n    class Category(models.Model):\r\n        title = models.CharField(max_length=250, help_text=\"250 Characters Max\")\r\n        slug = models.SlugField(unique=True, help_text=\"Suggested value generated from title. Must be unique.\")\r\n        description = models.TextField()\r\n        \r\n        def __unicode__(self):\r\n            return self.title\r\n            \r\n        class Meta:\r\n            verbose_name_plural = \"Categories\"\r\n            \r\n    class CategoryAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {'slug': ['title']}\r\n        \r\n    admin.site.register(Category, CategoryAdmin)\r\n       \r\n\r\n    class Entry(models.Model):\r\n        LIVE_STATUS = 1\r\n        DRAFT_STATUS = 2\r\n        HIDDEN_STATUS = 3\r\n        STATUS_CHOICES = (\r\n            (LIVE_STATUS, 'Live'),\r\n            (DRAFT_STATUS,'Draft'),\r\n            (HIDDEN_STATUS, 'Hidden'),\r\n        )\r\n        title = models.CharField(max_length=250)\r\n        slug = models.SlugField(unique_for_date='pub_date', help_text=\"Suggested value generated from title. Must be unique.\")\r\n        excerpt = models.TextField(blank=True)\r\n        excerpt_html = models.TextField(editable=False, blank=True)    \r\n        body = models.TextField()\r\n        body_html = models.TextField(editable=False, blank=True)    \r\n        pub_date = models.DateTimeField(default=datetime.datetime.now)\r\n        author = models.ForeignKey(User)\r\n        enable_comments = models.BooleanField(default=True)\r\n        featured = models.BooleanField(default=False)\r\n        status = models.IntegerField(choices=STATUS_CHOICES, default=LIVE_STATUS)\r\n        categories = models.ManyToManyField(Category)\r\n        tags = TagField()\r\n        \r\n        def save(self, force_insert=False, force_update=False):\r\n            self.body_html = markdown(self.body, ['codehilite'])\r\n            if self.excerpt:\r\n                self.excerpt_html = markdown(self.excerpt_html, ['codehilite'])\r\n            super(Entry, self).save(force_insert, force_update)\r\n            \r\n        class Meta:\r\n            verbose_name_plural = \"Entries\"\r\n            ordering = ['-pub_date']\r\n\r\n        def __unicode__(self):\r\n            return self.title\r\n            \r\n        def get_absolute_url(self):\r\n            return \"/blog/%s/%s/\" % (self.pub_date.strftime(\"%Y/%b/%d\").lower(), self.slug)\r\n        \r\n    class EntryAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {'slug': ['title']}\r\n        \r\n    admin.site.register(Entry, EntryAdmin)\r\n        \r\n     \r\n", "excerpt_html": "", "title": "Models for this blog", "author": 1, "excerpt": "", "body_html": "<p>Here is the code in models.py for the blog application</p>\n<div class=\"codehilite\"><pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">markdown</span> <span class=\"kn\">import</span> <span class=\"n\">markdown</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tagging.fields</span> <span class=\"kn\">import</span> <span class=\"n\">TagField</span>\n\n<span class=\"c\"># Create your models here.</span>\n<span class=\"k\">class</span> <span class=\"nc\">BlogPost</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__unicode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogPostAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;title&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;timestamp&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;pk&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BlogPost</span><span class=\"p\">,</span> <span class=\"n\">BlogPostAdmin</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Category</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s\">&quot;250 Characters Max&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s\">&quot;Suggested value generated from title. Must be unique.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__unicode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Categories&quot;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CategoryAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">prepopulated_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;slug&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&#39;title&#39;</span><span class=\"p\">]}</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Category</span><span class=\"p\">,</span> <span class=\"n\">CategoryAdmin</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">LIVE_STATUS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">DRAFT_STATUS</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">HIDDEN_STATUS</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n    <span class=\"n\">STATUS_CHOICES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">LIVE_STATUS</span><span class=\"p\">,</span> <span class=\"s\">&#39;Live&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">DRAFT_STATUS</span><span class=\"p\">,</span><span class=\"s\">&#39;Draft&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">HIDDEN_STATUS</span><span class=\"p\">,</span> <span class=\"s\">&#39;Hidden&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">)</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">(</span><span class=\"n\">unique_for_date</span><span class=\"o\">=</span><span class=\"s\">&#39;pub_date&#39;</span><span class=\"p\">,</span> <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s\">&quot;Suggested value generated from title. Must be unique.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">excerpt</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">excerpt_html</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    \n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">body_html</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    \n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">enable_comments</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">featured</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">STATUS_CHOICES</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">LIVE_STATUS</span><span class=\"p\">)</span>\n    <span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Category</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">TagField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_insert</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">force_update</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body_html</span> <span class=\"o\">=</span> <span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">&#39;codehilite&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excerpt</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excerpt_html</span> <span class=\"o\">=</span> <span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excerpt_html</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">&#39;codehilite&#39;</span><span class=\"p\">])</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">force_insert</span><span class=\"p\">,</span> <span class=\"n\">force_update</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Entries&quot;</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;-pub_date&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__unicode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;/blog/</span><span class=\"si\">%s</span><span class=\"s\">/</span><span class=\"si\">%s</span><span class=\"s\">/&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">&quot;%Y/%b/</span><span class=\"si\">%d</span><span class=\"s\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">slug</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EntryAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">prepopulated_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;slug&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&#39;title&#39;</span><span class=\"p\">]}</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">,</span> <span class=\"n\">EntryAdmin</span><span class=\"p\">)</span>\n</pre></div>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-20T19:43:40Z", "slug": "models-blog", "categories": [2, 3]}, "model": "blog_app.entry", "pk": 4}, {"fields": {"body": "There is a site [here](http://graphics.glig.com/generators/unicode_text){: target=\"_blank\"}\r\n\r\nHere is my email address: \u029d\u03c3\u025b\u2113.\u0262\u03c3\u2113\u2202\u01a8\u0442\u03b9c\u03ba@\u0262\u043c\u03b1\u03b9\u2113.c\u03c3\u043c\r\n\r\nThere are two reasons i know of to use this service.  \r\n\r\n* First, using an obfuscated email address on the page lets people know your email address, but presumably makes it harder for bots to harvest it.\r\n* Second, its an easy way to check if your system handles unicode corectly", "excerpt_html": "<p>There is a site <a href=\"http://graphics.glig.com/generators/unicode_text\">here</a> that lets you type in text to produce unicode text using substitute characters that look similar enough to ascii to be read.</p>", "title": "Creating obfuscated unicode from plaintext", "author": 1, "excerpt": "There is a site [here](http://graphics.glig.com/generators/unicode_text) that lets you type in text to produce unicode text using substitute characters that look similar enough to ascii to be read.", "body_html": "<p>There is a site <a href=\"http://graphics.glig.com/generators/unicode_text\">here</a>{: target=\"_blank\"}</p>\n<p>Here is my email address: \u029d\u03c3\u025b\u2113.\u0262\u03c3\u2113\u2202\u01a8\u0442\u03b9c\u03ba@\u0262\u043c\u03b1\u03b9\u2113.c\u03c3\u043c</p>\n<p>There are two reasons i know of to use this service.  </p>\n<ul>\n<li>First, using an obfuscated email address on the page lets people know your email address, but presumably makes it harder for bots to harvest it.</li>\n<li>Second, its an easy way to check if your system handles unicode corectly</li>\n</ul>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-21T14:00:47Z", "slug": "creating-obfuscated-unicode-plaintext", "categories": [4]}, "model": "blog_app.entry", "pk": 5}, {"fields": {"body": "here is the [original documentation](http://daringfireball.net/projects/markdown/syntax#header)\r\n\r\n------------------------------------\r\n\r\n# Header 1 #\r\n## Header 2 ##\r\n### Header 3 ###\r\n#### Header 4 ####\r\n##### Header 5 #####\r\n\r\nThis is a paragraph, which is text surrounded by whitespace. Paragraphs can be on one \r\nline (or many), and can drone on for hours.  \r\n\r\nHere is a Markdown link to [Warped](http://warpedvisions.org), and a literal . \r\nNow some SimpleLinks, like one to [google] (automagically links to are-you-\r\nfeeling-lucky), a [wiki: test] link to a Wikipedia page, and a link to \r\n[foldoc: CPU]s at foldoc.  \r\n\r\nNow some inline markup like _italics_,  **bold**, and `code()`. Note that underscores in \r\nwords are ignored in Markdown Extra.\r\n\r\n![picture alt](/static/favicon.ico \"my favicon\")     \r\n\r\n> Blockquotes are like quoted text in email replies\r\n>> And, they can be nested\r\n\r\n## Lists\r\n\r\n* Bullet lists are easy too\r\n- Another one\r\n+ Another one\r\n\r\nThis is a numbered list.  \r\n\r\n1. A numbered list\r\n2. Which is numbered\r\n3.    With periods and a space\r\n\r\n\r\nAnd now some code:\r\n\r\n    // Code is just text indented a bit (4 spaces)\r\n    which(is_easy) to_remember();\r\n\r\n[link to lists above if headerid is in options list](#lists)\r\n\r\n[link to Header 1 above if headerid is in options list](#header-1)\r\n\r\n\r\n-----------------------------\r\n\r\nis there an hr above and below? There should be\r\n\r\n********\r\n", "excerpt_html": "<p>This is the <a href=\"http://daringfireball.net/projects/markdown/syntax\">original documentation</a></p>", "title": "Markdown", "author": 1, "excerpt": "This is the [original documentation](http://daringfireball.net/projects/markdown/syntax)\r\n", "body_html": "<p>here is the <a href=\"http://daringfireball.net/projects/markdown/syntax#header\">original documentation</a></p>\n<hr />\n<h1 id=\"header-1\">Header 1</h1>\n<h2 id=\"header-2\">Header 2</h2>\n<h3 id=\"header-3\">Header 3</h3>\n<h4 id=\"header-4\">Header 4</h4>\n<h5 id=\"header-5\">Header 5</h5>\n<p>This is a paragraph, which is text surrounded by whitespace. Paragraphs can be on one \nline (or many), and can drone on for hours.<br />\n</p>\n<p>Here is a Markdown link to <a href=\"http://warpedvisions.org\">Warped</a>, and a literal . \nNow some SimpleLinks, like one to [google] (automagically links to are-you-\nfeeling-lucky), a [wiki: test] link to a Wikipedia page, and a link to \n[foldoc: CPU]s at foldoc.<br />\n</p>\n<p>Now some inline markup like <em>italics</em>,  <strong>bold</strong>, and <code>code()</code>. Note that underscores in \nwords are ignored in Markdown Extra.</p>\n<p><img alt=\"picture alt\" src=\"/static/favicon.ico\" title=\"my favicon\" />   <br />\n</p>\n<blockquote>\n<p>Blockquotes are like quoted text in email replies</p>\n<blockquote>\n<p>And, they can be nested</p>\n</blockquote>\n</blockquote>\n<h2 id=\"lists\">Lists</h2>\n<ul>\n<li>Bullet lists are easy too</li>\n<li>Another one</li>\n<li>Another one</li>\n</ul>\n<p>This is a numbered list.<br />\n</p>\n<ol>\n<li>A numbered list</li>\n<li>Which is numbered</li>\n<li>With periods and a space</li>\n</ol>\n<p>And now some code:</p>\n<div class=\"codehilite\"><pre><span class=\"c1\">// Code is just text indented a bit (4 spaces)</span>\n<span class=\"n\">which</span><span class=\"p\">(</span><span class=\"n\">is_easy</span><span class=\"p\">)</span> <span class=\"n\">to_remember</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p><a href=\"#lists\">link to lists above if headerid is in options list</a></p>\n<p><a href=\"#header-1\">link to Header 1 above if headerid is in options list</a></p>\n<hr />\n<p>is there an hr above and below? There should be</p>\n<hr />", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-21T17:27:35Z", "slug": "markdown", "categories": [2, 4]}, "model": "blog_app.entry", "pk": 6}, {"fields": {"body": "## Ubuntu\r\n\r\nsudo /etc/init.d/apache2 restart\r\n\r\ntail /var/apache2/log/access.log\r\n\r\n## Red Hat\r\nTo run Apache type the following at the command prompt:\r\n/etc/init.d/httpd start\r\n\r\nTo test it type:\r\n/etc/init.d/httpd status\r\n\r\nIf apache is running you should see something like the following:\r\nhttpd (pid 1844 1843 1842 1841 1840 1839 1838 1837 1828) is running...\r\n\r\nThere are several ways to run Apache at bootup, and here is one of the simple ones.\r\nTo run Apache at bootup type:\r\nvi /etc/rc.local\r\n\r\nThis will open rc.local in the text editor \"vi\". Arrow down to the bottom of the text (there may not be any yet, in which case it will be the first line) and add:\r\n/etc/init.d/httpd start", "excerpt_html": "<p>sudo /etc/init.d/apache2 restart</p>\n<p>tail /var/apache2/log/access.log</p>", "title": "Restart Apache, view logs", "author": 1, "excerpt": "sudo /etc/init.d/apache2 restart\r\n\r\ntail /var/apache2/log/access.log", "body_html": "<h2 id=\"ubuntu\">Ubuntu</h2>\n<p>sudo /etc/init.d/apache2 restart</p>\n<p>tail /var/apache2/log/access.log</p>\n<h2 id=\"red-hat\">Red Hat</h2>\n<p>To run Apache type the following at the command prompt:\n/etc/init.d/httpd start</p>\n<p>To test it type:\n/etc/init.d/httpd status</p>\n<p>If apache is running you should see something like the following:\nhttpd (pid 1844 1843 1842 1841 1840 1839 1838 1837 1828) is running...</p>\n<p>There are several ways to run Apache at bootup, and here is one of the simple ones.\nTo run Apache at bootup type:\nvi /etc/rc.local</p>\n<p>This will open rc.local in the text editor \"vi\". Arrow down to the bottom of the text (there may not be any yet, in which case it will be the first line) and add:\n/etc/init.d/httpd start</p>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-24T12:43:20Z", "slug": "restart-apache", "categories": [4]}, "model": "blog_app.entry", "pk": 7}, {"fields": {"body": "The motivation behind this site is to develop a 'portfolio' where I can write articles about topics that interest me, and provide prospective clients or employers a living example of the results of the skills I possess, or are in the process of learning.\r\n\r\nI have some sites hosted on dreamhost, which is a low cost, reliable shared hosting company.  They provide a method for django site deployment.  For this project I am looking to get closer to the metal, and so I have decided to use Amazon services.\r\n\r\nAmazon Web Services (AWS) provides what I hope will be a low cost virtual machine with ssh access.  In the past I have worked with a system administrator to deploy django at work, but I wasn't directly involved in running the services, or in the deployment.  So here I go.\r\n\r\nAlthough I expect light traffic on the site, all advice points to using a separate server for static content.  That will be housed in an S3 bucket\r\n\r\nSetting up the static storage on S3 proved to be easy.  I have very few static files, so I copied them to S3 using the built in file copy facility at Amazon.  Buckets can't be accessed with ssh command line or something like Filezilla.  There is an application for django that will allow files to be copied from the manage.py interface.  I'll explore that later.\r\n\r\nThe AMI image I chose was and Ubuntu system, because I am familiar with Ubuntu on the desktop.  This didn't work out well because I couldn't get ssh access.  Ubuntu images use username ubuntu apparently.  Other images use ec2-user or root.  Failing to get Ubuntu running, I switched to the first Amazon image.  It turns out to be a Red Hat Server.  This works fine with ec2-user.  ", "excerpt_html": "<p>I plan to deploy this site to Amazon Web Services (AWS) and serve static content with S3.  Here are my notes</p>", "title": "Moving to AWS -- EC2 and S3", "author": 1, "excerpt": "I plan to deploy this site to Amazon Web Services (AWS) and serve static content with S3.  Here are my notes", "body_html": "<p>The motivation behind this site is to develop a 'portfolio' where I can write articles about topics that interest me, and provide prospective clients or employers a living example of the results of the skills I possess, or are in the process of learning.</p>\n<p>I have some sites hosted on dreamhost, which is a low cost, reliable shared hosting company.  They provide a method for django site deployment.  For this project I am looking to get closer to the metal, and so I have decided to use Amazon services.</p>\n<p>Amazon Web Services (AWS) provides what I hope will be a low cost virtual machine with ssh access.  In the past I have worked with a system administrator to deploy django at work, but I wasn't directly involved in running the services, or in the deployment.  So here I go.</p>\n<p>Although I expect light traffic on the site, all advice points to using a separate server for static content.  That will be housed in an S3 bucket</p>\n<p>Setting up the static storage on S3 proved to be easy.  I have very few static files, so I copied them to S3 using the built in file copy facility at Amazon.  Buckets can't be accessed with ssh command line or something like Filezilla.  There is an application for django that will allow files to be copied from the manage.py interface.  I'll explore that later.</p>\n<p>The AMI image I chose was and Ubuntu system, because I am familiar with Ubuntu on the desktop.  This didn't work out well because I couldn't get ssh access.  Ubuntu images use username ubuntu apparently.  Other images use ec2-user or root.  Failing to get Ubuntu running, I switched to the first Amazon image.  It turns out to be a Red Hat Server.  This works fine with ec2-user.<br />\n</p>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-25T12:50:55Z", "slug": "moving-aws-and-ecs", "categories": [2, 4]}, "model": "blog_app.entry", "pk": 8}, {"fields": {"body": "Key: h9ckawgep8u88rxxpjpjnvpz\r\n\r\nApplication:\r\n    jcg espn api fun\r\n \r\nKey:\r\n    h9ckawgep8u88rxxpjpjnvpz \r\n\r\nShared Secret:\r\n    mYz6Jpzmx3G4qJEFe3dbvH7n \r\n\r\nStatus:\r\n    active \r\n\r\nRegistered:\r\n    4 months ago \r\n\r\nKey Rate Limits\r\n3\tCalls per second\r\n7,500\tCalls per day\r\n\r\njgoldstick\r\np4s", "excerpt_html": "", "title": "My ESPN Developer Account into", "author": 1, "excerpt": "", "body_html": "<p>Key: h9ckawgep8u88rxxpjpjnvpz</p>\n<p>Application:\n    jcg espn api fun</p>\n<p>Key:\n    h9ckawgep8u88rxxpjpjnvpz </p>\n<p>Shared Secret:\n    mYz6Jpzmx3G4qJEFe3dbvH7n </p>\n<p>Status:\n    active </p>\n<p>Registered:\n    4 months ago </p>\n<p>Key Rate Limits\n3   Calls per second\n7,500   Calls per day</p>\n<p>jgoldstick\np4s</p>", "modified_date": null, "featured": false, "status": 2, "enable_comments": true, "pub_date": "2012-09-27T12:28:41Z", "slug": "my-espn-developer-account", "categories": [1, 3]}, "model": "blog_app.entry", "pk": 9}, {"fields": {"body": "Forms give websites the ability for the reader to participate.  Every website I've ever written has used forms.  Creating a basic form in html, and writing the backend code to process the input in the most bare bones way isn't too much work, but that's not enough.  A form should look good, give hints to the user about how to properly fill it out, and rigorously check the data provided.  If there is a problem in the form data, the user should be gently coaxed to correct the problems.  In this regard, django Forms facility helps a lot.\r\n\r\n## Basic Form\r\n\r\nbla blah\r\n\r\n## Some Simple Validation\r\n\r\ncomes out of the box\r\n\r\n## Fields that depend on other fields\r\n\r\n## Adding Bot Deterent Capability\r\n\r\nMany sites use Captcha to deter automatic form submission by Bots.  The idea is that a human can read some poorly displayed characters correctly and repeat them back to a form in a field.  A Bot program will have a much harder time doing this, and so the Bot submissions will fail.  Like many people, I find Captcha to be annoying.  The letters are often too poorly displayed to figure out correctly.\r\n\r\nAs an alternative, I prefer the form ask the user a question that is easy for a human being to answer correctly, but not a Bot.  In this example, I am using a randomly generated arithmetic equation -- the sum of 2 or 3 randomly generated integers.  To keep it easy, I limit the integers to numbers from 1 to 20.  This is probably not a very good test, since the answer will be from 3 to 60, and I can imagine a bot could work that out by brute force.  Perhaps a better test would be to display some text and ask for the second word that starts with 'C', or something.\r\n\r\nWhatever the test, the form can generate the question and the answer when entered.   When the form is submitted, the answer is checked.  The problem is that HTTP is stateless, and so we need a way to save the answer when it is generated, so that the submit request can use it to test it.\r\n\r\nHere is my code for the test:\r\n\r\n    :::python\r\n    import random                                \r\n    def produce_expression():\r\n        \"\"\"\r\n        return a tuple: expression (str), answer (int)\r\n        \"\"\"\r\n        num_terms = random.randint(2,3)\r\n        operands = []\r\n        while num_terms:\r\n            n = random.randint(1,21)\r\n            operands.append(n)\r\n            num_terms -= 1\r\n            \r\n        result = sum(operands)\r\n        string_operands = map(str, operands)\r\n        expression = \" + \".join(string_operands)\r\n        return expression, result\r\n\r\nThe view.py code looks like this:\r\n\r\n    :::python\r\n    def contact(request):\r\n\r\n    test_expression, answer = produce_expression()\r\n    request.session['last_answer'] = request.session.get('answer', None)\r\n    request.session['answer'] = answer\r\n\r\n    answer = request.session['answer']\r\n    if request.method == 'POST': # If the form has been submitted...\r\n        #form = ContactForm(request.POST) # A form bound to the POST data\r\n        form = ContactForm(request.POST, request=request) # A form bound to the POST data\r\n        if form.is_valid(): # All validation rules pass\r\n            # Process the data in form.cleaned_data\r\n            request.session['answer'] = \"\"\r\n            return HttpResponseRedirect('/thanks/') # Redirect after POST\r\n    else:\r\n        form = ContactForm() # An unbound form \r\n\r\n    c = {'form': form, 'test': test_expression, 'answer': answer}\r\n    c.update(csrf(request))\r\n    return render_to_response('blog/contact_form.html', c)\r\n   \r\nEvery time the contact page is created we get a new question and answer:\r\n\r\n    :::python\r\n    test_expression, answer = produce_expression()\r\n    request.session['last_answer'] = request.session.get('answer', None)\r\n    request.session['answer'] = answer\r\n\r\nWhen the user enters his answer in the form, the form is once again created, so we need to keep the answer that was correct when the user entered his choice.  The session object which is included in the request object will maintain state for us\r\n\r\nWhen we instantiate the form with the POST data, we also pass the request object which contains the session where we have stored the answer.  In the form itself, we use the clean method to compare results.\r\n\r\n    :::python\r\n    class ContactForm(forms.Form):\r\n        subject = forms.CharField(max_length=100, required=True)\r\n        message = forms.CharField(required=True)\r\n        sender = forms.EmailField(required=True)\r\n        test_result = forms.IntegerField(label=\"Test Result\", required=True)\r\n        cc_myself = forms.BooleanField(required=False)\r\n\r\n        def __init__(self, *args,**kwargs):\r\n            # overide __init__ to grab the request object, and then initialize the parent class\r\n            self.request = kwargs.pop('request', None)\r\n            super (ContactForm,self).__init__(*args,**kwargs)\r\n\r\n        # django runs clean_<field name> for each field in your form\r\n        def clean_test_result(self):\r\n            data = self.cleaned_data['test_result']\r\n            if self.request.session['last_answer'] <> data:\r\n                raise forms.ValidationError(\"You didn't get the math right!\")\r\n\r\nAnd here is the template:\r\n\r\n    :::html\r\n    {% extends 'base.html' %}\r\n            {% block head %}\r\n            <title>joelgoldstick.com - Contact Us</title>\r\n            {% endblock %}\r\n            {% block content %}\r\n            <h1>Contact Us</h1>\r\n            <p>Let us know what you think!</p>\r\n            <p>To be sure you are not a bot, answer this below:</p>\r\n            <p>{{ test }} = ??</p>\r\n            <form id=\"contact_form\" action=\"\" method=\"post\">{% csrf_token %}\r\n            {{ form.as_p }}\r\n            <input type=\"submit\" value=\"Submit\">\r\n            </form>\r\n            {% endblock %}\r\n\r\n    ", "excerpt_html": "<p>Some notes on using Django Forms, ModelForms and BetterForms</p>", "title": "Django Forms", "author": 1, "excerpt": "Some notes on using Django Forms, ModelForms and BetterForms", "body_html": "<p>Forms give websites the ability for the reader to participate.  Every website I've ever written has used forms.  Creating a basic form in html, and writing the backend code to process the input in the most bare bones way isn't too much work, but that's not enough.  A form should look good, give hints to the user about how to properly fill it out, and rigorously check the data provided.  If there is a problem in the form data, the user should be gently coaxed to correct the problems.  In this regard, django Forms facility helps a lot.</p>\n<h2 id=\"basic-form\">Basic Form</h2>\n<p>bla blah</p>\n<h2 id=\"some-simple-validation\">Some Simple Validation</h2>\n<p>comes out of the box</p>\n<h2 id=\"fields-that-depend-on-other-fields\">Fields that depend on other fields</h2>\n<h2 id=\"adding-bot-deterent-capability\">Adding Bot Deterent Capability</h2>\n<p>Many sites use Captcha to deter automatic form submission by Bots.  The idea is that a human can read some poorly displayed characters correctly and repeat them back to a form in a field.  A Bot program will have a much harder time doing this, and so the Bot submissions will fail.  Like many people, I find Captcha to be annoying.  The letters are often too poorly displayed to figure out correctly.</p>\n<p>As an alternative, I prefer the form ask the user a question that is easy for a human being to answer correctly, but not a Bot.  In this example, I am using a randomly generated arithmetic equation -- the sum of 2 or 3 randomly generated integers.  To keep it easy, I limit the integers to numbers from 1 to 20.  This is probably not a very good test, since the answer will be from 3 to 60, and I can imagine a bot could work that out by brute force.  Perhaps a better test would be to display some text and ask for the second word that starts with 'C', or something.</p>\n<p>Whatever the test, the form can generate the question and the answer when entered.   When the form is submitted, the answer is checked.  The problem is that HTTP is stateless, and so we need a way to save the answer when it is generated, so that the submit request can use it to test it.</p>\n<p>Here is my code for the test:</p>\n<div class=\"codehilite\"><pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>                                \n<span class=\"k\">def</span> <span class=\"nf\">produce_expression</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    return a tuple: expression (str), answer (int)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">num_terms</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">operands</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"n\">num_terms</span><span class=\"p\">:</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">21</span><span class=\"p\">)</span>\n        <span class=\"n\">operands</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"n\">num_terms</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">operands</span><span class=\"p\">)</span>\n    <span class=\"n\">string_operands</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">operands</span><span class=\"p\">)</span>\n    <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"s\">&quot; + &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">string_operands</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">result</span>\n</pre></div>\n\n\n<p>The view.py code looks like this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"nf\">contact</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n<span class=\"n\">test_expression</span><span class=\"p\">,</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">produce_expression</span><span class=\"p\">()</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;last_answer&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;answer&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;answer&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">answer</span>\n\n<span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;answer&#39;</span><span class=\"p\">]</span>\n<span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">&#39;POST&#39;</span><span class=\"p\">:</span> <span class=\"c\"># If the form has been submitted...</span>\n    <span class=\"c\">#form = ContactForm(request.POST) # A form bound to the POST data</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">ContactForm</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">)</span> <span class=\"c\"># A form bound to the POST data</span>\n    <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span> <span class=\"c\"># All validation rules pass</span>\n        <span class=\"c\"># Process the data in form.cleaned_data</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;answer&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s\">&#39;/thanks/&#39;</span><span class=\"p\">)</span> <span class=\"c\"># Redirect after POST</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">ContactForm</span><span class=\"p\">()</span> <span class=\"c\"># An unbound form</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;form&#39;</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"s\">&#39;test&#39;</span><span class=\"p\">:</span> <span class=\"n\">test_expression</span><span class=\"p\">,</span> <span class=\"s\">&#39;answer&#39;</span><span class=\"p\">:</span> <span class=\"n\">answer</span><span class=\"p\">}</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">csrf</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">))</span>\n<span class=\"k\">return</span> <span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"s\">&#39;blog/contact_form.html&#39;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Every time the contact page is created we get a new question and answer:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">test_expression</span><span class=\"p\">,</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">produce_expression</span><span class=\"p\">()</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;last_answer&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;answer&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;answer&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">answer</span>\n</pre></div>\n\n\n<p>When the user enters his answer in the form, the form is once again created, so we need to keep the answer that was correct when the user entered his choice.  The session object which is included in the request object will maintain state for us</p>\n<p>When we instantiate the form with the POST data, we also pass the request object which contains the session where we have stored the answer.  In the form itself, we use the clean method to compare results.</p>\n<div class=\"codehilite\"><pre><span class=\"k\">class</span> <span class=\"nc\">ContactForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">test_result</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s\">&quot;Test Result&quot;</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">cc_myself</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># overide __init__ to grab the request object, and then initialize the parent class</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;request&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span> <span class=\"p\">(</span><span class=\"n\">ContactForm</span><span class=\"p\">,</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># django runs clean_&lt;field name&gt; for each field in your form</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clean_test_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s\">&#39;test_result&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">&#39;last_answer&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;&gt;</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s\">&quot;You didn&#39;t get the math right!&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>And here is the template:</p>\n<div class=\"codehilite\"><pre>{% extends &#39;base.html&#39; %}\n        {% block head %}\n        <span class=\"nt\">&lt;title&gt;</span>joelgoldstick.com - Contact Us<span class=\"nt\">&lt;/title&gt;</span>\n        {% endblock %}\n        {% block content %}\n        <span class=\"nt\">&lt;h1&gt;</span>Contact Us<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;p&gt;</span>Let us know what you think!<span class=\"nt\">&lt;/p&gt;</span>\n        <span class=\"nt\">&lt;p&gt;</span>To be sure you are not a bot, answer this below:<span class=\"nt\">&lt;/p&gt;</span>\n        <span class=\"nt\">&lt;p&gt;</span>{{ test }} = ??<span class=\"nt\">&lt;/p&gt;</span>\n        <span class=\"nt\">&lt;form</span> <span class=\"na\">id=</span><span class=\"s\">&quot;contact_form&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;&quot;</span> <span class=\"na\">method=</span><span class=\"s\">&quot;post&quot;</span><span class=\"nt\">&gt;</span>{% csrf_token %}\n        {{ form.as_p }}\n        <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Submit&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;/form&gt;</span>\n        {% endblock %}\n</pre></div>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-09-30T13:05:14Z", "slug": "django-forms", "categories": [2, 3]}, "model": "blog_app.entry", "pk": 11}, {"fields": {"body": "## Early Seeds\r\n\r\nSomewhere around when I was in 4th grade, my class had a field trip to the Ford River Rouge Assembly plant.  It was fascinating.  The [Rouge Plant](http://en.wikipedia.org/wiki/Rouge_plant) was a full service affair.  They made their own steel, their own glass, and ultimately assemble various Fords out of these materials.  This was a giant systems engineering project.  I got to see how it worked!\r\n\r\nI grew up in the late 60s when the NASA space program to reach the moon was a very big thing.  This got me curious about astronomy and I soon found that there was a local astronomy club ([The Detroit Astronomical Society](http://ephemeraldetroit.blogspot.com/2011/10/from-what-i-can-ascertain-detroit.html) where more experienced members would help new members built their own telescope.  I built a 6 inch Newtonian telescope, grinding the mirror to a concave spherical shape, and then polished it to a very accurate parabola.  The equatorial mounting was made with a variety of pipe fittings.  So, this was my first engineering project.\r\n\r\n## College\r\n\r\nI began college expecting to study electrical engineering, especial analog circuit design.  But those were the years of the beginnings of microprocessors.  Digital was taking off in a big way, and it was possible to build your own computer.  I did.  It was an S-100 Z80 system with a North Star floppy disk drive.  To get it to work needed code written in assembly language that interfaced to the keyboard, disk drive and video output cards.  My second engineering project!\r\n\r\nBy the time I graduated, I was hooked on software development, having learned how to write assembler code, Pascal, and a little PL/M\r\n\r\n## Professional Path\r\n\r\n[My first appearance on the internet](http://groups.google.com/group/alt.psychology.personality/tree/browse_frm/month/1995-03/7126ba5c1e1b0d8f?rnum=21&_done=%2Fgroup%2Falt.psychology.personality%2Fbrowse_frm%2Fmonth%2F1995-03%3F#doc_fb6b7e6b31190bb6) was a post to the alt.psychology.personality use-net group on March 1, 1995.  I haven't really been interested in the enneagram in some time, but I read a lot about it in the early 90s\r\n\r\nI actually appear as a co author to a [paper describing the first project I worked on out of College](http://accelconf.web.cern.ch/AccelConf/p79/PDF/PAC1979_3387.PDF) at Brookhaven National Laboratory, on Long Island.  Looking at the specification for the microcomputers will seem quaint today, but this was cutting edge technology then.  This was the first time microprocessors were used to control instrumentation at Brookhaven.  I wrote a program in 8080 assembly language that control three motors to control the movement of a lathe bed.  A magnetic field sensor was placed on the bed, and the application provided a detailed mapping of the magnetic properties of some very large magnet cores that would be used in the National Synchrotron Light Source particle accelerator.\r\n\r\nA few years later I landed at a start up near Boston called Microcom whose flagship product was an early electronic mail program that let Apple ][ users and IBM PC users send emails to each other's computers using direct modem connections.  This was written in Basic\r\n\r\nWhen [Microcom](http://en.wikipedia.org/wiki/Microcom) decided they could make more money making hardware (modems) than selling software I left to do contracting for various companies around Boston.  Most of this work was written in C for MS DOS machines.  dBASE was the data base component of choice in those days.\r\n\r\nIn the very early days of Windows, it was difficult to write Windows applications in C.  Visual Basic was the quick route to doing that, so I switched over to that.  I did a fair amount of Access development for desktop applications.  Although Access lets the developer create tables and relationships with drag and drop forms, it also would translate the queries to SQL if you asked it.  So, I began to learn SQL. Eventually, when the web arrived, Microsoft created VB Script and ASP for building interactive web sites.  I was a Microsoft developer completely until I came across PHP which was quickly surpassing Perl as the 'cool' language for website development.  My earlier interest in SQL was useful in making PHP/mySQL websites \r\n\r\nPHP introduced me to the open source world.  This was great because I was doing a lot of small contract website development jobs, and open source development environment was free, while Microsoft went more 'Enterprise' with the related costs for developers.  I was still using Windows XP at the time, but curious about the emergence of several Linux Distributions.  I tried Knoppix, which you could run directly from a CD in a Windows machine.  Eventually I settled on Ubuntu and left Windows behind for good.\r\n\r\nSince 2008, when I moved to New York City, I have been maintaining a lot of legacy code written in PHP.   A big problem with PHP is that the barrier to entry is so low that lots of unqualified people can 'make things work' -- sort of!   This gets old quickly.  So for all of my new development I began using Python, and Django.\r\n\r\nWhat's next?\r\n\r\n", "excerpt_html": "<p>Notes on how I came to where I am as a software developer</p>", "title": "How I Got here", "author": 1, "excerpt": "Notes on how I came to where I am as a software developer", "body_html": "<h2>Early Seeds</h2>\n<p>Somewhere around when I was in 4th grade, my class had a field trip to the Ford River Rouge Assembly plant.  It was fascinating.  The <a href=\"http://en.wikipedia.org/wiki/Rouge_plant\">Rouge Plant</a> was a full service affair.  They made their own steel, their own glass, and ultimately assemble various Fords out of these materials.  This was a giant systems engineering project.  I got to see how it worked!</p>\n<p>I grew up in the late 60s when the NASA space program to reach the moon was a very big thing.  This got me curious about astronomy and I soon found that there was a local astronomy club (<a href=\"http://ephemeraldetroit.blogspot.com/2011/10/from-what-i-can-ascertain-detroit.html\">The Detroit Astronomical Society</a> where more experienced members would help new members built their own telescope.  I built a 6 inch Newtonian telescope, grinding the mirror to a concave spherical shape, and then polished it to a very accurate parabola.  The equatorial mounting was made with a variety of pipe fittings.  So, this was my first engineering project.</p>\n<h2>College</h2>\n<p>I began college expecting to study electrical engineering, especial analog circuit design.  But those were the years of the beginnings of microprocessors.  Digital was taking off in a big way, and it was possible to build your own computer.  I did.  It was an S-100 Z80 system with a North Star floppy disk drive.  To get it to work needed code written in assembly language that interfaced to the keyboard, disk drive and video output cards.  My second engineering project!</p>\n<p>By the time I graduated, I was hooked on software development, having learned how to write assembler code, Pascal, and a little PL/M</p>\n<h2>Professional Path</h2>\n<p><a href=\"http://groups.google.com/group/alt.psychology.personality/tree/browse_frm/month/1995-03/7126ba5c1e1b0d8f?rnum=21&amp;_done=%2Fgroup%2Falt.psychology.personality%2Fbrowse_frm%2Fmonth%2F1995-03%3F#doc_fb6b7e6b31190bb6\">My first appearance on the internet</a> was a post to the alt.psychology.personality use-net group on March 1, 1995.  I haven't really been interested in the enneagram in some time, but I read a lot about it in the early 90s</p>\n<p>I actually appear as a co author to a <a href=\"http://accelconf.web.cern.ch/AccelConf/p79/PDF/PAC1979_3387.PDF\">paper describing the first project I worked on out of College</a> at Brookhaven National Laboratory, on Long Island.  Looking at the specification for the microcomputers will seem quaint today, but this was cutting edge technology then.  This was the first time microprocessors were used to control instrumentation at Brookhaven.  I wrote a program in 8080 assembly language that control three motors to control the movement of a lathe bed.  A magnetic field sensor was placed on the bed, and the application provided a detailed mapping of the magnetic properties of some very large magnet cores that would be used in the National Synchrotron Light Source particle accelerator.</p>\n<p>A few years later I landed at a start up near Boston called Microcom whose flagship product was an early electronic mail program that let Apple ][ users and IBM PC users send emails to each other's computers using direct modem connections.  This was written in Basic</p>\n<p>When <a href=\"http://en.wikipedia.org/wiki/Microcom\">Microcom</a> decided they could make more money making hardware (modems) than selling software I left to do contracting for various companies around Boston.  Most of this work was written in C for MS DOS machines.  dBASE was the data base component of choice in those days.</p>\n<p>In the very early days of Windows, it was difficult to write Windows applications in C.  Visual Basic was the quick route to doing that, so I switched over to that.  I did a fair amount of Access development for desktop applications.  Although Access lets the developer create tables and relationships with drag and drop forms, it also would translate the queries to SQL if you asked it.  So, I began to learn SQL. Eventually, when the web arrived, Microsoft created VB Script and ASP for building interactive web sites.  I was a Microsoft developer completely until I came across PHP which was quickly surpassing Perl as the 'cool' language for website development.  My earlier interest in SQL was useful in making PHP/mySQL websites </p>\n<p>PHP introduced me to the open source world.  This was great because I was doing a lot of small contract website development jobs, and open source development environment was free, while Microsoft went more 'Enterprise' with the related costs for developers.  I was still using Windows XP at the time, but curious about the emergence of several Linux Distributions.  I tried Knoppix, which you could run directly from a CD in a Windows machine.  Eventually I settled on Ubuntu and left Windows behind for good.</p>\n<p>Since 2008, when I moved to New York City, I have been maintaining a lot of legacy code written in PHP.   A big problem with PHP is that the barrier to entry is so low that lots of unqualified people can 'make things work' -- sort of!   This gets old quickly.  So for all of my new development I began using Python, and Django.</p>\n<p>What's next?</p>", "modified_date": "2016-03-29T17:18:19Z", "featured": false, "status": 1, "enable_comments": true, "pub_date": "2012-10-10T15:31:23Z", "slug": "how-i-got-here", "categories": [6]}, "model": "blog_app.entry", "pk": 12}, {"fields": {"body": "I haven't look at this blog in a couple of years.  It was written with Django 1.3.\r\n\r\nSo, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.  ", "excerpt_html": "<p>I haven't look at this blog in a couple of years.  It was written with Django 1.3.</p>\n<p>So, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.  </p>", "title": "Migrating from Django 1.3 to 1.6", "author": 1, "excerpt": "I haven't look at this blog in a couple of years.  It was written with Django 1.3.\r\n\r\nSo, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.  ", "body_html": "<p>I haven't look at this blog in a couple of years.  It was written with Django 1.3.</p>\n<p>So, yesterday and today I upgraded to 1.6 using virtualenvwrapper to segregate my packages.  </p>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2014-08-06T15:59:38Z", "slug": "migrating-django-13-16", "categories": [2]}, "model": "blog_app.entry", "pk": 14}, {"fields": {"body": "  You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn\u2019t all that \u201cfriendly\u201d to template authors: they have to \u201cjust know\u201d that they\u2019re dealing with publishers here.\r\n\r\nWell, if you\u2019re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lower cased version of the model class\u2019 name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list.\r\n\r\nIf this still isn\u2019t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use:", "excerpt_html": "<p>This is an entry using cbv</p>", "title": "crud test", "author": 1, "excerpt": "This is an entry using cbv", "body_html": "<p>You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn\u2019t all that \u201cfriendly\u201d to template authors: they have to \u201cjust know\u201d that they\u2019re dealing with publishers here.</p>\n<p>Well, if you\u2019re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lower cased version of the model class\u2019 name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list.</p>\n<p>If this still isn\u2019t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use:</p>", "modified_date": null, "featured": false, "status": 1, "enable_comments": true, "pub_date": "2014-08-07T13:53:53Z", "slug": "crud-test", "categories": [2]}, "model": "blog_app.entry", "pk": 15}, {"fields": {"body": "\r\nup vote 60 down vote favorite\r\n28\r\n\t\r\n\r\nI'm having a bit of trouble understanding how the new CBVs work. My question is this, I need to require login in all the views, and in some of them, specific permissions. In function-based views I do that with @permission_required() and the login_required attribute in the view, but I don't know how to do this on the new views. Is there some section in the django docs explaining this? I didn't found anything. What is wrong in my code?", "excerpt_html": "<p>this is the excerpt</p>", "title": "testing cvb", "author": 1, "excerpt": "this is the excerpt", "body_html": "<p>up vote 60 down vote favorite\n28</p>\n<p>I'm having a bit of trouble understanding how the new CBVs work. My question is this, I need to require login in all the views, and in some of them, specific permissions. In function-based views I do that with @permission_required() and the login_required attribute in the view, but I don't know how to do this on the new views. Is there some section in the django docs explaining this? I didn't found anything. What is wrong in my code?</p>", "modified_date": "2016-03-30T17:20:19Z", "featured": true, "status": 1, "enable_comments": true, "pub_date": "2014-08-12T19:09:00Z", "slug": "testing-cvb", "categories": [6]}, "model": "blog_app.entry", "pk": 16}]