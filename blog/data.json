[{"fields": {"description": "python related articles", "slug": "python", "title": "python"}, "model": "blog_app.category", "pk": 1}, {"fields": {"description": "git related articles", "slug": "git", "title": "git"}, "model": "blog_app.category", "pk": 2}, {"fields": {"description": "markdown exampl", "slug": "markdown", "title": "markdown"}, "model": "blog_app.category", "pk": 3}, {"fields": {"body": "## Title\r\n\r\nfirst paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. \r\n\r\n+ This entry is written *italics* **bold** with markdown.\r\n+ This entry is written with markdown.\r\n+ This entry is written with markdown.\r\n+ This entry is written with markdown.\r\n+ This entry is written with markdown.\r\n\r\n2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. 2nd __paragraph__. \r\n\r\n  1. one\r\n  2. two\r\n  3. three\r\n\r\n[example link](/blog)\r\n\r\n### Code here: \r\n\tfrom django.db import models\r\n\tfrom django.contrib import admin\r\n\tfrom markdown import markdown\r\n\timport datetime\r\n\tfrom django.contrib.auth.models import User\r\n\tfrom tagging.fields import TagField\r\n\t\r\n\t# Create your models here.\r\n\t\r\n\t\r\n\tclass Category(models.Model):\r\n\t    title = models.CharField(max_length=250, help_text=\"250 Characters Max\")\r\n\t    slug = models.SlugField(unique=True,\r\n\t        help_text=\"Suggested value generated from title. Must be unique.\")\r\n\t    description = models.TextField()\r\n\t\r\n\t    def __unicode__(self):\r\n\t        return self.title\r\n\t\r\n\t    class Meta:\r\n\t        verbose_name_plural = \"Categories\"\r\n\t\r\n\t\r\n\tclass CategoryAdmin(admin.ModelAdmin):\r\n\t    prepopulated_fields = {'slug': ['title']}\r\n\t\r\n\tadmin.site.register(Category, CategoryAdmin)\r\n\t\r\n\t\r\n\tclass Entry(models.Model):\r\n\t    LIVE_STATUS = 1\r\n\t    DRAFT_STATUS = 2\r\n\t    HIDDEN_STATUS = 3\r\n\t    STATUS_CHOICES = (\r\n\t        (LIVE_STATUS, 'Live'),\r\n\t        (DRAFT_STATUS, 'Draft'),\r\n\t        (HIDDEN_STATUS, 'Hidden'),\r\n\t    )\r\n\t    title = models.CharField(max_length=250)\r\n\t    slug = models.SlugField(unique_for_date='pub_date',\r\n\t            help_text=\"Suggested value generated from title. Must be unique.\")\r\n\t    excerpt = models.TextField(blank=True)\r\n\t    excerpt_html = models.TextField(editable=False, blank=True)\r\n\t    body = models.TextField()\r\n\t    body_html = models.TextField(editable=False, blank=True)\r\n\t    pub_date = models.DateTimeField(default=datetime.datetime.now)\r\n\t    modified_date = models.DateTimeField(default=datetime.datetime.now)\r\n\t    author = models.ForeignKey(User)\r\n\t    enable_comments = models.BooleanField(default=True)\r\n\t    featured = models.BooleanField(default=False)\r\n\t    status = models.IntegerField(choices=STATUS_CHOICES, default=LIVE_STATUS)\r\n\t    categories = models.ManyToManyField(Category)\r\n\t    # tags = TagField()\r\n\t\r\n\t    def save(self, force_insert=False, force_update=False):\r\n\t        self.body_html = markdown(self.body, ['codehilite', 'headerid'])\r\n\t        if self.excerpt:\r\n\t            self.excerpt_html = markdown(self.excerpt, ['codehilite'])\r\n\t        super(Entry, self).save(force_insert, force_update)\r\n\t\r\n\t    class Meta:\r\n\t        verbose_name_plural = \"Entries\"\r\n\t        ordering = ['-pub_date']\r\n\t\r\n\t    def __unicode__(self):\r\n\t        return self.title\r\n\t\r\n\t    def get_absolute_url(self):\r\n\t        return \"/blog/%s/%s/\" % (self.pub_date.strftime(\"%Y/%b/%d\").lower(),\r\n\t                                 self.slug)\r\n\t\r\n\t\r\n\tclass EntryAdmin(admin.ModelAdmin):\r\n\t    prepopulated_fields = {'slug': ['title']}\r\n\t    list_display = ['title', 'status', 'pub_date']\r\n\t\r\n\tadmin.site.register(Entry, EntryAdmin)\r\n\t\r\n\t\r\n\tclass Link(models.Model):\r\n\t    title = models.CharField(max_length=250)\r\n\t    description = models.TextField(blank=True)\r\n\t    description_html = models.TextField(blank=True)\r\n\t    url = models.URLField(unique=True)\r\n\t    posted_by = models.ForeignKey(User)\r\n\t    pub_date = models.DateTimeField(default=datetime.datetime.now)\r\n\t    slug = models.SlugField(unique_for_date='pub_date')\r\n\t    # tags = TagField()\r\n\t    enable_comments = models.BooleanField(default=False)\r\n\t    post_elsewhere = models.BooleanField(default=False)\r\n\r\n-----------------------------------------------\r\n\r\n\r\n", "excerpt_html": "<p>this is the excerpt</p>", "title": "first", "author": 1, "excerpt": "this is the excerpt", "body_html": "<h2 id=\"title\">Title</h2>\n<p>first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. first paragraph. </p>\n<ul>\n<li>This entry is written <em>italics</em> <strong>bold</strong> with markdown.</li>\n<li>This entry is written with markdown.</li>\n<li>This entry is written with markdown.</li>\n<li>This entry is written with markdown.</li>\n<li>This entry is written with markdown.</li>\n</ul>\n<p>2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. 2nd <strong>paragraph</strong>. </p>\n<ol>\n<li>one</li>\n<li>two</li>\n<li>three</li>\n</ol>\n<p><a href=\"/blog\">example link</a></p>\n<h3 id=\"code-here\">Code here:</h3>\n<pre class=\"codehilite\"><code>from django.db import models\nfrom django.contrib import admin\nfrom markdown import markdown\nimport datetime\nfrom django.contrib.auth.models import User\nfrom tagging.fields import TagField\n\n# Create your models here.\n\n\nclass Category(models.Model):\n    title = models.CharField(max_length=250, help_text=&quot;250 Characters Max&quot;)\n    slug = models.SlugField(unique=True,\n        help_text=&quot;Suggested value generated from title. Must be unique.&quot;)\n    description = models.TextField()\n\n    def __unicode__(self):\n        return self.title\n\n    class Meta:\n        verbose_name_plural = &quot;Categories&quot;\n\n\nclass CategoryAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ['title']}\n\nadmin.site.register(Category, CategoryAdmin)\n\n\nclass Entry(models.Model):\n    LIVE_STATUS = 1\n    DRAFT_STATUS = 2\n    HIDDEN_STATUS = 3\n    STATUS_CHOICES = (\n        (LIVE_STATUS, 'Live'),\n        (DRAFT_STATUS, 'Draft'),\n        (HIDDEN_STATUS, 'Hidden'),\n    )\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(unique_for_date='pub_date',\n            help_text=&quot;Suggested value generated from title. Must be unique.&quot;)\n    excerpt = models.TextField(blank=True)\n    excerpt_html = models.TextField(editable=False, blank=True)\n    body = models.TextField()\n    body_html = models.TextField(editable=False, blank=True)\n    pub_date = models.DateTimeField(default=datetime.datetime.now)\n    modified_date = models.DateTimeField(default=datetime.datetime.now)\n    author = models.ForeignKey(User)\n    enable_comments = models.BooleanField(default=True)\n    featured = models.BooleanField(default=False)\n    status = models.IntegerField(choices=STATUS_CHOICES, default=LIVE_STATUS)\n    categories = models.ManyToManyField(Category)\n    # tags = TagField()\n\n    def save(self, force_insert=False, force_update=False):\n        self.body_html = markdown(self.body, ['codehilite', 'headerid'])\n        if self.excerpt:\n            self.excerpt_html = markdown(self.excerpt, ['codehilite'])\n        super(Entry, self).save(force_insert, force_update)\n\n    class Meta:\n        verbose_name_plural = &quot;Entries&quot;\n        ordering = ['-pub_date']\n\n    def __unicode__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return &quot;/blog/%s/%s/&quot; % (self.pub_date.strftime(&quot;%Y/%b/%d&quot;).lower(),\n                                 self.slug)\n\n\nclass EntryAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ['title']}\n    list_display = ['title', 'status', 'pub_date']\n\nadmin.site.register(Entry, EntryAdmin)\n\n\nclass Link(models.Model):\n    title = models.CharField(max_length=250)\n    description = models.TextField(blank=True)\n    description_html = models.TextField(blank=True)\n    url = models.URLField(unique=True)\n    posted_by = models.ForeignKey(User)\n    pub_date = models.DateTimeField(default=datetime.datetime.now)\n    slug = models.SlugField(unique_for_date='pub_date')\n    # tags = TagField()\n    enable_comments = models.BooleanField(default=False)\n    post_elsewhere = models.BooleanField(default=False)</code></pre>\n\n\n<hr />", "modified_date": "2015-06-23T19:30:22Z", "featured": false, "status": 1, "enable_comments": true, "pub_date": "2015-06-23T19:20:46Z", "slug": "first", "categories": [3]}, "model": "blog_app.entry", "pk": 1}, {"fields": {"body": "An h1 header\r\n============\r\n\r\nParagraphs are separated by a blank line.\r\n\r\n2nd paragraph. *Italic*, **bold**, and `monospace`. Itemized lists\r\nlook like:\r\n\r\n  * this one\r\n  * that one\r\n  * the other one\r\n\r\nNote that --- not considering the asterisk --- the actual text\r\ncontent starts at 4-columns in.\r\n\r\n> Block quotes are\r\n> written like so.\r\n>\r\n> They can span multiple paragraphs,\r\n> if you like.\r\n\r\nUse 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all\r\nin chapters 12--14\"). Three dots ... will be converted to an ellipsis.\r\nUnicode is supported. \u263a\r\n\r\n\r\n\r\nAn h2 header\r\n------------\r\n\r\nHere's a numbered list:\r\n\r\n 1. first item\r\n 2. second item\r\n 3. third item\r\n\r\nNote again how the actual text starts at 4 columns in (4 characters\r\nfrom the left side). Here's a code sample:\r\n\r\n    # Let me re-iterate ...\r\n    for i in 1 .. 10 { do-something(i) }\r\n\r\nAs you probably guessed, indented 4 spaces. By the way, instead of\r\nindenting the block, you can use delimited blocks, if you like:\r\n\r\n~~~\r\ndefine foobar() {\r\n    print \"Welcome to flavor country!\";\r\n}\r\n~~~\r\n\r\n(which makes copying & pasting easier). You can optionally mark the\r\ndelimited block for Pandoc to syntax highlight it:\r\n\r\n~~~python\r\nimport time\r\n# Quick, count to ten!\r\nfor i in range(10):\r\n    # (but not *too* quick)\r\n    time.sleep(0.5)\r\n    print i\r\n~~~\r\n\r\n\r\n\r\n### An h3 header ###\r\n\r\nNow a nested list:\r\n\r\n 1. First, get these ingredients:\r\n\r\n      * carrots\r\n      * celery\r\n      * lentils\r\n\r\n 2. Boil some water.\r\n\r\n 3. Dump everything in the pot and follow\r\n    this algorithm:\r\n\r\n        find wooden spoon\r\n        uncover pot\r\n        stir\r\n        cover pot\r\n        balance wooden spoon precariously on pot handle\r\n        wait 10 minutes\r\n        goto first step (or shut off burner when done)\r\n\r\n    Do not bump wooden spoon or it will fall.\r\n\r\nNotice again how text always lines up on 4-space indents (including\r\nthat last line which continues item 3 above).\r\n\r\nHere's a link to [a website](http://foo.bar), to a [local\r\ndoc](local-doc.html), and to a [section heading in the current\r\ndoc](#an-h2-header). Here's a footnote [^1].\r\n\r\n[^1]: Footnote text goes here.\r\n\r\nTables can look like this:\r\n\r\nsize  material      color\r\n----  ------------  ------------\r\n9     leather       brown\r\n10    hemp canvas   natural\r\n11    glass         transparent\r\n\r\nTable: Shoes, their sizes, and what they're made of\r\n\r\n(The above is the caption for the table.) Pandoc also supports\r\nmulti-line tables:\r\n\r\n--------  -----------------------\r\nkeyword   text\r\n--------  -----------------------\r\nred       Sunsets, apples, and\r\n          other red or reddish\r\n          things.\r\n\r\ngreen     Leaves, grass, frogs\r\n          and other things it's\r\n          not easy being.\r\n--------  -----------------------\r\n\r\nA horizontal rule follows.\r\n\r\n***\r\n\r\nHere's a definition list:\r\n\r\napples\r\n  : Good for making applesauce.\r\noranges\r\n  : Citrus!\r\ntomatoes\r\n  : There's no \"e\" in tomatoe.\r\n\r\nAgain, text is indented 4 spaces. (Put a blank line between each\r\nterm/definition pair to spread things out more.)\r\n\r\nHere's a \"line block\":\r\n\r\n| Line one\r\n|   Line too\r\n| Line tree\r\n\r\nand images can be specified like so:\r\n\r\n![example image](example-image.jpg \"An exemplary image\")\r\n\r\nInline math equations go in like so: $\\omega = d\\phi / dt$. Display\r\nmath should get its own line and be put in in double-dollarsigns:\r\n\r\n$$I = \\int \\rho R^{2} dV$$\r\n\r\nAnd note that you can backslash-escape any punctuation characters\r\nwhich you wish to be displayed literally, ex.: \\`foo\\`, \\*bar\\*, etc.\r\n", "excerpt_html": "<p>Markdown usage</p>", "title": "Markdown Exampl", "author": 1, "excerpt": "Markdown usage", "body_html": "<h1 id=\"an-h1-header\">An h1 header</h1>\n<p>Paragraphs are separated by a blank line.</p>\n<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code>monospace</code>. Itemized lists\nlook like:</p>\n<ul>\n<li>this one</li>\n<li>that one</li>\n<li>the other one</li>\n</ul>\n<p>Note that --- not considering the asterisk --- the actual text\ncontent starts at 4-columns in.</p>\n<blockquote>\n<p>Block quotes are\nwritten like so.</p>\n<p>They can span multiple paragraphs,\nif you like.</p>\n</blockquote>\n<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all\nin chapters 12--14\"). Three dots ... will be converted to an ellipsis.\nUnicode is supported. \u263a</p>\n<h2 id=\"an-h2-header\">An h2 header</h2>\n<p>Here's a numbered list:</p>\n<ol>\n<li>first item</li>\n<li>second item</li>\n<li>third item</li>\n</ol>\n<p>Note again how the actual text starts at 4 columns in (4 characters\nfrom the left side). Here's a code sample:</p>\n<pre class=\"codehilite\"><code># Let me re-iterate ...\nfor i in 1 .. 10 { do-something(i) }</code></pre>\n\n\n<p>As you probably guessed, indented 4 spaces. By the way, instead of\nindenting the block, you can use delimited blocks, if you like:</p>\n<p>~~~\ndefine foobar() {\n    print \"Welcome to flavor country!\";\n}\n~~~</p>\n<p>(which makes copying &amp; pasting easier). You can optionally mark the\ndelimited block for Pandoc to syntax highlight it:</p>\n<p>~~~python\nimport time</p>\n<h1 id=\"quick-count-to-ten\">Quick, count to ten!</h1>\n<p>for i in range(10):\n    # (but not <em>too</em> quick)\n    time.sleep(0.5)\n    print i\n~~~</p>\n<h3 id=\"an-h3-header\">An h3 header</h3>\n<p>Now a nested list:</p>\n<ol>\n<li>\n<p>First, get these ingredients:</p>\n<ul>\n<li>carrots</li>\n<li>celery</li>\n<li>lentils</li>\n</ul>\n</li>\n<li>\n<p>Boil some water.</p>\n</li>\n<li>\n<p>Dump everything in the pot and follow\n    this algorithm:</p>\n<pre class=\"codehilite\"><code>find wooden spoon\nuncover pot\nstir\ncover pot\nbalance wooden spoon precariously on pot handle\nwait 10 minutes\ngoto first step (or shut off burner when done)</code></pre>\n\n\n<p>Do not bump wooden spoon or it will fall.</p>\n</li>\n</ol>\n<p>Notice again how text always lines up on 4-space indents (including\nthat last line which continues item 3 above).</p>\n<p>Here's a link to <a href=\"http://foo.bar\">a website</a>, to a <a href=\"local-doc.html\">local\ndoc</a>, and to a <a href=\"#an-h2-header\">section heading in the current\ndoc</a>. Here's a footnote [^1].</p>\n<p>[^1]: Footnote text goes here.</p>\n<p>Tables can look like this:</p>\n<p>size  material      color</p>\n<hr />\n<p>9     leather       brown\n10    hemp canvas   natural\n11    glass         transparent</p>\n<p>Table: Shoes, their sizes, and what they're made of</p>\n<p>(The above is the caption for the table.) Pandoc also supports\nmulti-line tables:</p>\n<hr />\n<p>keyword   text</p>\n<hr />\n<p>red       Sunsets, apples, and\n          other red or reddish\n          things.</p>\n<p>green     Leaves, grass, frogs\n          and other things it's\n          not easy being.</p>\n<hr />\n<p>A horizontal rule follows.</p>\n<hr />\n<p>Here's a definition list:</p>\n<p>apples\n  : Good for making applesauce.\noranges\n  : Citrus!\ntomatoes\n  : There's no \"e\" in tomatoe.</p>\n<p>Again, text is indented 4 spaces. (Put a blank line between each\nterm/definition pair to spread things out more.)</p>\n<p>Here's a \"line block\":</p>\n<p>| Line one\n|   Line too\n| Line tree</p>\n<p>and images can be specified like so:</p>\n<p><img alt=\"example image\" src=\"example-image.jpg\" title=\"An exemplary image\" /></p>\n<p>Inline math equations go in like so: $\\omega = d\\phi / dt$. Display\nmath should get its own line and be put in in double-dollarsigns:</p>\n<p>$$I = \\int \\rho R^{2} dV$$</p>\n<p>And note that you can backslash-escape any punctuation characters\nwhich you wish to be displayed literally, ex.: `foo`, *bar*, etc.</p>", "modified_date": "2015-06-23T19:48:49Z", "featured": false, "status": 1, "enable_comments": true, "pub_date": "2015-06-23T19:48:49Z", "slug": "markdown-exampl", "categories": [3]}, "model": "blog_app.entry", "pk": 2}, {"fields": {"body": "[Docs for Pip](https://pip.pypa.io/en/latest/index.html)", "excerpt_html": "<p>The python package installer</p>", "title": "Pip", "author": 1, "excerpt": "The python package installer", "body_html": "<p><a href=\"https://pip.pypa.io/en/latest/index.html\">Docs for Pip</a></p>", "modified_date": "2015-06-23T20:38:56Z", "featured": false, "status": 1, "enable_comments": true, "pub_date": "2015-06-23T20:38:56Z", "slug": "pip", "categories": [1]}, "model": "blog_app.entry", "pk": 3}]